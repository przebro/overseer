// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: proto/services.proto

package services

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AuthorizeActionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AuthorizeActionMsg) Reset() {
	*x = AuthorizeActionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeActionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeActionMsg) ProtoMessage() {}

func (x *AuthorizeActionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeActionMsg.ProtoReflect.Descriptor instead.
func (*AuthorizeActionMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{0}
}

func (x *AuthorizeActionMsg) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuthorizeActionMsg) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type TicketActionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Odate string `protobuf:"bytes,3,opt,name=odate,proto3" json:"odate,omitempty"`
}

func (x *TicketActionMsg) Reset() {
	*x = TicketActionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketActionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketActionMsg) ProtoMessage() {}

func (x *TicketActionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketActionMsg.ProtoReflect.Descriptor instead.
func (*TicketActionMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{1}
}

func (x *TicketActionMsg) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TicketActionMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TicketActionMsg) GetOdate() string {
	if x != nil {
		return x.Odate
	}
	return ""
}

type FlagActionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State int32  `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *FlagActionMsg) Reset() {
	*x = FlagActionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagActionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagActionMsg) ProtoMessage() {}

func (x *FlagActionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagActionMsg.ProtoReflect.Descriptor instead.
func (*FlagActionMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{2}
}

func (x *FlagActionMsg) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *FlagActionMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlagActionMsg) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type TaskActionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	TaskID string `protobuf:"bytes,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *TaskActionMsg) Reset() {
	*x = TaskActionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskActionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskActionMsg) ProtoMessage() {}

func (x *TaskActionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskActionMsg.ProtoReflect.Descriptor instead.
func (*TaskActionMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{3}
}

func (x *TaskActionMsg) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TaskActionMsg) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

type TaskFilterMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Group     string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TaskID    string `protobuf:"bytes,4,opt,name=taskID,proto3" json:"taskID,omitempty"`
	OdateFrom string `protobuf:"bytes,5,opt,name=odateFrom,proto3" json:"odateFrom,omitempty"`
	OdateTo   string `protobuf:"bytes,6,opt,name=odateTo,proto3" json:"odateTo,omitempty"`
	Status    string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TaskFilterMsg) Reset() {
	*x = TaskFilterMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFilterMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFilterMsg) ProtoMessage() {}

func (x *TaskFilterMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFilterMsg.ProtoReflect.Descriptor instead.
func (*TaskFilterMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{4}
}

func (x *TaskFilterMsg) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TaskFilterMsg) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *TaskFilterMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskFilterMsg) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TaskFilterMsg) GetOdateFrom() string {
	if x != nil {
		return x.OdateFrom
	}
	return ""
}

func (x *TaskFilterMsg) GetOdateTo() string {
	if x != nil {
		return x.OdateTo
	}
	return ""
}

func (x *TaskFilterMsg) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TaskOrderMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	TaskGroup string `protobuf:"bytes,2,opt,name=taskGroup,proto3" json:"taskGroup,omitempty"`
	TaskName  string `protobuf:"bytes,3,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Odate     string `protobuf:"bytes,4,opt,name=odate,proto3" json:"odate,omitempty"`
}

func (x *TaskOrderMsg) Reset() {
	*x = TaskOrderMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOrderMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOrderMsg) ProtoMessage() {}

func (x *TaskOrderMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOrderMsg.ProtoReflect.Descriptor instead.
func (*TaskOrderMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{5}
}

func (x *TaskOrderMsg) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TaskOrderMsg) GetTaskGroup() string {
	if x != nil {
		return x.TaskGroup
	}
	return ""
}

func (x *TaskOrderMsg) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskOrderMsg) GetOdate() string {
	if x != nil {
		return x.Odate
	}
	return ""
}

type DefinitionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName string `protobuf:"bytes,1,opt,name=groupName,proto3" json:"groupName,omitempty"`
	TaskName  string `protobuf:"bytes,2,opt,name=taskName,proto3" json:"taskName,omitempty"`
	LockID    uint32 `protobuf:"varint,3,opt,name=lockID,proto3" json:"lockID,omitempty"`
}

func (x *DefinitionMsg) Reset() {
	*x = DefinitionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionMsg) ProtoMessage() {}

func (x *DefinitionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionMsg.ProtoReflect.Descriptor instead.
func (*DefinitionMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{6}
}

func (x *DefinitionMsg) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *DefinitionMsg) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *DefinitionMsg) GetLockID() uint32 {
	if x != nil {
		return x.LockID
	}
	return 0
}

type DefinitionActionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token         string           `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	DefinitionMsg []*DefinitionMsg `protobuf:"bytes,2,rep,name=definitionMsg,proto3" json:"definitionMsg,omitempty"`
}

func (x *DefinitionActionMsg) Reset() {
	*x = DefinitionActionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionActionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionActionMsg) ProtoMessage() {}

func (x *DefinitionActionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionActionMsg.ProtoReflect.Descriptor instead.
func (*DefinitionActionMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{7}
}

func (x *DefinitionActionMsg) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DefinitionActionMsg) GetDefinitionMsg() []*DefinitionMsg {
	if x != nil {
		return x.DefinitionMsg
	}
	return nil
}

type LockResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	LockID  uint32 `protobuf:"varint,2,opt,name=lockID,proto3" json:"lockID,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LockResult) Reset() {
	*x = LockResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockResult) ProtoMessage() {}

func (x *LockResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockResult.ProtoReflect.Descriptor instead.
func (*LockResult) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{8}
}

func (x *LockResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LockResult) GetLockID() uint32 {
	if x != nil {
		return x.LockID
	}
	return 0
}

func (x *LockResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type LockResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockResult []*LockResult `protobuf:"bytes,1,rep,name=lockResult,proto3" json:"lockResult,omitempty"`
}

func (x *LockResultMsg) Reset() {
	*x = LockResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockResultMsg) ProtoMessage() {}

func (x *LockResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockResultMsg.ProtoReflect.Descriptor instead.
func (*LockResultMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{9}
}

func (x *LockResultMsg) GetLockResult() []*LockResult {
	if x != nil {
		return x.LockResult
	}
	return nil
}

type DefinitionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DefinitionResult) Reset() {
	*x = DefinitionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionResult) ProtoMessage() {}

func (x *DefinitionResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionResult.ProtoReflect.Descriptor instead.
func (*DefinitionResult) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{10}
}

func (x *DefinitionResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DefinitionResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DefinitionResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefinitionMsg []*DefinitionResult `protobuf:"bytes,1,rep,name=definitionMsg,proto3" json:"definitionMsg,omitempty"`
}

func (x *DefinitionResultMsg) Reset() {
	*x = DefinitionResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionResultMsg) ProtoMessage() {}

func (x *DefinitionResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionResultMsg.ProtoReflect.Descriptor instead.
func (*DefinitionResultMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{11}
}

func (x *DefinitionResultMsg) GetDefinitionMsg() []*DefinitionResult {
	if x != nil {
		return x.DefinitionMsg
	}
	return nil
}

type GroupActionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GroupActionMsg) Reset() {
	*x = GroupActionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupActionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupActionMsg) ProtoMessage() {}

func (x *GroupActionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupActionMsg.ProtoReflect.Descriptor instead.
func (*GroupActionMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{12}
}

func (x *GroupActionMsg) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ActionResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ActionResultMsg) Reset() {
	*x = ActionResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResultMsg) ProtoMessage() {}

func (x *ActionResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResultMsg.ProtoReflect.Descriptor instead.
func (*ActionResultMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{13}
}

func (x *ActionResultMsg) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ActionResultMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type FlagListResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlagName string `protobuf:"bytes,1,opt,name=flagName,proto3" json:"flagName,omitempty"`
	State    int32  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *FlagListResultMsg) Reset() {
	*x = FlagListResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagListResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagListResultMsg) ProtoMessage() {}

func (x *FlagListResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagListResultMsg.ProtoReflect.Descriptor instead.
func (*FlagListResultMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{14}
}

func (x *FlagListResultMsg) GetFlagName() string {
	if x != nil {
		return x.FlagName
	}
	return ""
}

func (x *FlagListResultMsg) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type TicketListResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Odate string `protobuf:"bytes,2,opt,name=odate,proto3" json:"odate,omitempty"`
}

func (x *TicketListResultMsg) Reset() {
	*x = TicketListResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketListResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketListResultMsg) ProtoMessage() {}

func (x *TicketListResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketListResultMsg.ProtoReflect.Descriptor instead.
func (*TicketListResultMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{15}
}

func (x *TicketListResultMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TicketListResultMsg) GetOdate() string {
	if x != nil {
		return x.Odate
	}
	return ""
}

type TaskListResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName  string `protobuf:"bytes,1,opt,name=groupName,proto3" json:"groupName,omitempty"`
	TaskName   string `protobuf:"bytes,2,opt,name=taskName,proto3" json:"taskName,omitempty"`
	TaskId     string `protobuf:"bytes,3,opt,name=taskId,proto3" json:"taskId,omitempty"`
	OrderDate  string `protobuf:"bytes,4,opt,name=orderDate,proto3" json:"orderDate,omitempty"`
	TaskStatus int32  `protobuf:"varint,5,opt,name=taskStatus,proto3" json:"taskStatus,omitempty"`
	Waiting    string `protobuf:"bytes,6,opt,name=waiting,proto3" json:"waiting,omitempty"`
}

func (x *TaskListResultMsg) Reset() {
	*x = TaskListResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskListResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListResultMsg) ProtoMessage() {}

func (x *TaskListResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListResultMsg.ProtoReflect.Descriptor instead.
func (*TaskListResultMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{16}
}

func (x *TaskListResultMsg) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *TaskListResultMsg) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskListResultMsg) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskListResultMsg) GetOrderDate() string {
	if x != nil {
		return x.OrderDate
	}
	return ""
}

func (x *TaskListResultMsg) GetTaskStatus() int32 {
	if x != nil {
		return x.TaskStatus
	}
	return 0
}

func (x *TaskListResultMsg) GetWaiting() string {
	if x != nil {
		return x.Waiting
	}
	return ""
}

type TaskDetailResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseData  *TaskListResultMsg `protobuf:"bytes,1,opt,name=baseData,proto3" json:"baseData,omitempty"`
	Hold      bool               `protobuf:"varint,2,opt,name=hold,proto3" json:"hold,omitempty"`
	Confirm   bool               `protobuf:"varint,3,opt,name=confirm,proto3" json:"confirm,omitempty"`
	RunNumber int32              `protobuf:"varint,4,opt,name=runNumber,proto3" json:"runNumber,omitempty"`
	StartTime string             `protobuf:"bytes,5,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   string             `protobuf:"bytes,6,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Worker    string             `protobuf:"bytes,7,opt,name=worker,proto3" json:"worker,omitempty"`
	Output    []string           `protobuf:"bytes,8,rep,name=output,proto3" json:"output,omitempty"`
}

func (x *TaskDetailResultMsg) Reset() {
	*x = TaskDetailResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDetailResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDetailResultMsg) ProtoMessage() {}

func (x *TaskDetailResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDetailResultMsg.ProtoReflect.Descriptor instead.
func (*TaskDetailResultMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{17}
}

func (x *TaskDetailResultMsg) GetBaseData() *TaskListResultMsg {
	if x != nil {
		return x.BaseData
	}
	return nil
}

func (x *TaskDetailResultMsg) GetHold() bool {
	if x != nil {
		return x.Hold
	}
	return false
}

func (x *TaskDetailResultMsg) GetConfirm() bool {
	if x != nil {
		return x.Confirm
	}
	return false
}

func (x *TaskDetailResultMsg) GetRunNumber() int32 {
	if x != nil {
		return x.RunNumber
	}
	return 0
}

func (x *TaskDetailResultMsg) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TaskDetailResultMsg) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *TaskDetailResultMsg) GetWorker() string {
	if x != nil {
		return x.Worker
	}
	return ""
}

func (x *TaskDetailResultMsg) GetOutput() []string {
	if x != nil {
		return x.Output
	}
	return nil
}

type DefinitionListGroupResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName string `protobuf:"bytes,1,opt,name=groupName,proto3" json:"groupName,omitempty"`
}

func (x *DefinitionListGroupResultMsg) Reset() {
	*x = DefinitionListGroupResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionListGroupResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionListGroupResultMsg) ProtoMessage() {}

func (x *DefinitionListGroupResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionListGroupResultMsg.ProtoReflect.Descriptor instead.
func (*DefinitionListGroupResultMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{18}
}

func (x *DefinitionListGroupResultMsg) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type DefinitionListResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName string `protobuf:"bytes,1,opt,name=groupName,proto3" json:"groupName,omitempty"`
	TaskName  string `protobuf:"bytes,2,opt,name=taskName,proto3" json:"taskName,omitempty"`
}

func (x *DefinitionListResultMsg) Reset() {
	*x = DefinitionListResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionListResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionListResultMsg) ProtoMessage() {}

func (x *DefinitionListResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionListResultMsg.ProtoReflect.Descriptor instead.
func (*DefinitionListResultMsg) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{19}
}

func (x *DefinitionListResultMsg) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *DefinitionListResultMsg) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

var File_proto_services_proto protoreflect.FileDescriptor

var file_proto_services_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a,
	0x12, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x51, 0x0a, 0x0f, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x4f,
	0x0a, 0x0d, 0x46, 0x6c, 0x61, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x3d, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0xb7,
	0x01, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x74, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x61,
	0x0a, 0x0d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x44, 0x22, 0x67, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a,
	0x0a, 0x0d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x22, 0x58, 0x0a, 0x0a, 0x4c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x42, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x46, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x54, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x22, 0x26, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x45,
	0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x11, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c,
	0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c,
	0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3f, 0x0a, 0x13,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xbd, 0x01,
	0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xff, 0x01,
	0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73,
	0x67, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x75,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x3c, 0x0a, 0x1c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a,
	0x17, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0x54, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x32, 0x96, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x09,
	0x41, 0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73,
	0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x67, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x30,
	0x01, 0x32, 0xf8, 0x03, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3a, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x09, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x09, 0x52, 0x65, 0x72,
	0x75, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x46, 0x72, 0x65, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x07, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x4f, 0x6b, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x09, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x0a, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x32, 0x96, 0x03, 0x0a,
	0x11, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0e, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73,
	0x67, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x10, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0a, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67,
	0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x67, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73,
	0x67, 0x22, 0x00, 0x30, 0x01, 0x42, 0x10, 0x5a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_services_proto_rawDescOnce sync.Once
	file_proto_services_proto_rawDescData = file_proto_services_proto_rawDesc
)

func file_proto_services_proto_rawDescGZIP() []byte {
	file_proto_services_proto_rawDescOnce.Do(func() {
		file_proto_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_services_proto_rawDescData)
	})
	return file_proto_services_proto_rawDescData
}

var file_proto_services_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_proto_services_proto_goTypes = []interface{}{
	(*AuthorizeActionMsg)(nil),           // 0: proto.AuthorizeActionMsg
	(*TicketActionMsg)(nil),              // 1: proto.TicketActionMsg
	(*FlagActionMsg)(nil),                // 2: proto.FlagActionMsg
	(*TaskActionMsg)(nil),                // 3: proto.TaskActionMsg
	(*TaskFilterMsg)(nil),                // 4: proto.TaskFilterMsg
	(*TaskOrderMsg)(nil),                 // 5: proto.TaskOrderMsg
	(*DefinitionMsg)(nil),                // 6: proto.DefinitionMsg
	(*DefinitionActionMsg)(nil),          // 7: proto.DefinitionActionMsg
	(*LockResult)(nil),                   // 8: proto.LockResult
	(*LockResultMsg)(nil),                // 9: proto.LockResultMsg
	(*DefinitionResult)(nil),             // 10: proto.DefinitionResult
	(*DefinitionResultMsg)(nil),          // 11: proto.DefinitionResultMsg
	(*GroupActionMsg)(nil),               // 12: proto.GroupActionMsg
	(*ActionResultMsg)(nil),              // 13: proto.ActionResultMsg
	(*FlagListResultMsg)(nil),            // 14: proto.FlagListResultMsg
	(*TicketListResultMsg)(nil),          // 15: proto.TicketListResultMsg
	(*TaskListResultMsg)(nil),            // 16: proto.TaskListResultMsg
	(*TaskDetailResultMsg)(nil),          // 17: proto.TaskDetailResultMsg
	(*DefinitionListGroupResultMsg)(nil), // 18: proto.DefinitionListGroupResultMsg
	(*DefinitionListResultMsg)(nil),      // 19: proto.DefinitionListResultMsg
}
var file_proto_services_proto_depIdxs = []int32{
	6,  // 0: proto.DefinitionActionMsg.definitionMsg:type_name -> proto.DefinitionMsg
	8,  // 1: proto.LockResultMsg.lockResult:type_name -> proto.LockResult
	10, // 2: proto.DefinitionResultMsg.definitionMsg:type_name -> proto.DefinitionResult
	16, // 3: proto.TaskDetailResultMsg.baseData:type_name -> proto.TaskListResultMsg
	0,  // 4: proto.AuthorizeService.Authorize:input_type -> proto.AuthorizeActionMsg
	1,  // 5: proto.ResourceService.AddTicket:input_type -> proto.TicketActionMsg
	1,  // 6: proto.ResourceService.DeleteTicket:input_type -> proto.TicketActionMsg
	1,  // 7: proto.ResourceService.CheckTicket:input_type -> proto.TicketActionMsg
	1,  // 8: proto.ResourceService.ListTickets:input_type -> proto.TicketActionMsg
	2,  // 9: proto.ResourceService.SetFlag:input_type -> proto.FlagActionMsg
	2,  // 10: proto.ResourceService.ListFlags:input_type -> proto.FlagActionMsg
	5,  // 11: proto.TaskService.OrderTask:input_type -> proto.TaskOrderMsg
	5,  // 12: proto.TaskService.ForceTask:input_type -> proto.TaskOrderMsg
	3,  // 13: proto.TaskService.RerunTask:input_type -> proto.TaskActionMsg
	3,  // 14: proto.TaskService.HoldTask:input_type -> proto.TaskActionMsg
	3,  // 15: proto.TaskService.FreeTask:input_type -> proto.TaskActionMsg
	3,  // 16: proto.TaskService.SetToOk:input_type -> proto.TaskActionMsg
	4,  // 17: proto.TaskService.ListTasks:input_type -> proto.TaskFilterMsg
	3,  // 18: proto.TaskService.TaskDetail:input_type -> proto.TaskActionMsg
	7,  // 19: proto.DefinitionService.GetDefinition:input_type -> proto.DefinitionActionMsg
	7,  // 20: proto.DefinitionService.LockDefinition:input_type -> proto.DefinitionActionMsg
	7,  // 21: proto.DefinitionService.UnlockDefinition:input_type -> proto.DefinitionActionMsg
	12, // 22: proto.DefinitionService.ListGroups:input_type -> proto.GroupActionMsg
	7,  // 23: proto.DefinitionService.ListDefinitionsFromGroup:input_type -> proto.DefinitionActionMsg
	13, // 24: proto.AuthorizeService.Authorize:output_type -> proto.ActionResultMsg
	13, // 25: proto.ResourceService.AddTicket:output_type -> proto.ActionResultMsg
	13, // 26: proto.ResourceService.DeleteTicket:output_type -> proto.ActionResultMsg
	13, // 27: proto.ResourceService.CheckTicket:output_type -> proto.ActionResultMsg
	15, // 28: proto.ResourceService.ListTickets:output_type -> proto.TicketListResultMsg
	13, // 29: proto.ResourceService.SetFlag:output_type -> proto.ActionResultMsg
	14, // 30: proto.ResourceService.ListFlags:output_type -> proto.FlagListResultMsg
	13, // 31: proto.TaskService.OrderTask:output_type -> proto.ActionResultMsg
	13, // 32: proto.TaskService.ForceTask:output_type -> proto.ActionResultMsg
	13, // 33: proto.TaskService.RerunTask:output_type -> proto.ActionResultMsg
	13, // 34: proto.TaskService.HoldTask:output_type -> proto.ActionResultMsg
	13, // 35: proto.TaskService.FreeTask:output_type -> proto.ActionResultMsg
	13, // 36: proto.TaskService.SetToOk:output_type -> proto.ActionResultMsg
	16, // 37: proto.TaskService.ListTasks:output_type -> proto.TaskListResultMsg
	17, // 38: proto.TaskService.TaskDetail:output_type -> proto.TaskDetailResultMsg
	11, // 39: proto.DefinitionService.GetDefinition:output_type -> proto.DefinitionResultMsg
	9,  // 40: proto.DefinitionService.LockDefinition:output_type -> proto.LockResultMsg
	9,  // 41: proto.DefinitionService.UnlockDefinition:output_type -> proto.LockResultMsg
	18, // 42: proto.DefinitionService.ListGroups:output_type -> proto.DefinitionListGroupResultMsg
	19, // 43: proto.DefinitionService.ListDefinitionsFromGroup:output_type -> proto.DefinitionListResultMsg
	24, // [24:44] is the sub-list for method output_type
	4,  // [4:24] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_services_proto_init() }
func file_proto_services_proto_init() {
	if File_proto_services_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeActionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketActionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagActionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskActionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFilterMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOrderMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionActionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupActionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagListResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketListResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskListResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDetailResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionListGroupResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionListResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_proto_services_proto_goTypes,
		DependencyIndexes: file_proto_services_proto_depIdxs,
		MessageInfos:      file_proto_services_proto_msgTypes,
	}.Build()
	File_proto_services_proto = out.File
	file_proto_services_proto_rawDesc = nil
	file_proto_services_proto_goTypes = nil
	file_proto_services_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthorizeServiceClient is the client API for AuthorizeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthorizeServiceClient interface {
	Authorize(ctx context.Context, in *AuthorizeActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
}

type authorizeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizeServiceClient(cc grpc.ClientConnInterface) AuthorizeServiceClient {
	return &authorizeServiceClient{cc}
}

func (c *authorizeServiceClient) Authorize(ctx context.Context, in *AuthorizeActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.AuthorizeService/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizeServiceServer is the server API for AuthorizeService service.
type AuthorizeServiceServer interface {
	Authorize(context.Context, *AuthorizeActionMsg) (*ActionResultMsg, error)
}

// UnimplementedAuthorizeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthorizeServiceServer struct {
}

func (*UnimplementedAuthorizeServiceServer) Authorize(context.Context, *AuthorizeActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}

func RegisterAuthorizeServiceServer(s *grpc.Server, srv AuthorizeServiceServer) {
	s.RegisterService(&_AuthorizeService_serviceDesc, srv)
}

func _AuthorizeService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthorizeService/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServiceServer).Authorize(ctx, req.(*AuthorizeActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthorizeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthorizeService",
	HandlerType: (*AuthorizeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _AuthorizeService_Authorize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services.proto",
}

// ResourceServiceClient is the client API for ResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceServiceClient interface {
	AddTicket(ctx context.Context, in *TicketActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	DeleteTicket(ctx context.Context, in *TicketActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	CheckTicket(ctx context.Context, in *TicketActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	ListTickets(ctx context.Context, in *TicketActionMsg, opts ...grpc.CallOption) (ResourceService_ListTicketsClient, error)
	SetFlag(ctx context.Context, in *FlagActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	ListFlags(ctx context.Context, in *FlagActionMsg, opts ...grpc.CallOption) (ResourceService_ListFlagsClient, error)
}

type resourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceServiceClient(cc grpc.ClientConnInterface) ResourceServiceClient {
	return &resourceServiceClient{cc}
}

func (c *resourceServiceClient) AddTicket(ctx context.Context, in *TicketActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.ResourceService/AddTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteTicket(ctx context.Context, in *TicketActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.ResourceService/DeleteTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) CheckTicket(ctx context.Context, in *TicketActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.ResourceService/CheckTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListTickets(ctx context.Context, in *TicketActionMsg, opts ...grpc.CallOption) (ResourceService_ListTicketsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ResourceService_serviceDesc.Streams[0], "/proto.ResourceService/ListTickets", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceServiceListTicketsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourceService_ListTicketsClient interface {
	Recv() (*TicketListResultMsg, error)
	grpc.ClientStream
}

type resourceServiceListTicketsClient struct {
	grpc.ClientStream
}

func (x *resourceServiceListTicketsClient) Recv() (*TicketListResultMsg, error) {
	m := new(TicketListResultMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceServiceClient) SetFlag(ctx context.Context, in *FlagActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.ResourceService/SetFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListFlags(ctx context.Context, in *FlagActionMsg, opts ...grpc.CallOption) (ResourceService_ListFlagsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ResourceService_serviceDesc.Streams[1], "/proto.ResourceService/ListFlags", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceServiceListFlagsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourceService_ListFlagsClient interface {
	Recv() (*FlagListResultMsg, error)
	grpc.ClientStream
}

type resourceServiceListFlagsClient struct {
	grpc.ClientStream
}

func (x *resourceServiceListFlagsClient) Recv() (*FlagListResultMsg, error) {
	m := new(FlagListResultMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResourceServiceServer is the server API for ResourceService service.
type ResourceServiceServer interface {
	AddTicket(context.Context, *TicketActionMsg) (*ActionResultMsg, error)
	DeleteTicket(context.Context, *TicketActionMsg) (*ActionResultMsg, error)
	CheckTicket(context.Context, *TicketActionMsg) (*ActionResultMsg, error)
	ListTickets(*TicketActionMsg, ResourceService_ListTicketsServer) error
	SetFlag(context.Context, *FlagActionMsg) (*ActionResultMsg, error)
	ListFlags(*FlagActionMsg, ResourceService_ListFlagsServer) error
}

// UnimplementedResourceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedResourceServiceServer struct {
}

func (*UnimplementedResourceServiceServer) AddTicket(context.Context, *TicketActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTicket not implemented")
}
func (*UnimplementedResourceServiceServer) DeleteTicket(context.Context, *TicketActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (*UnimplementedResourceServiceServer) CheckTicket(context.Context, *TicketActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTicket not implemented")
}
func (*UnimplementedResourceServiceServer) ListTickets(*TicketActionMsg, ResourceService_ListTicketsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTickets not implemented")
}
func (*UnimplementedResourceServiceServer) SetFlag(context.Context, *FlagActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFlag not implemented")
}
func (*UnimplementedResourceServiceServer) ListFlags(*FlagActionMsg, ResourceService_ListFlagsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFlags not implemented")
}

func RegisterResourceServiceServer(s *grpc.Server, srv ResourceServiceServer) {
	s.RegisterService(&_ResourceService_serviceDesc, srv)
}

func _ResourceService_AddTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).AddTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ResourceService/AddTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).AddTicket(ctx, req.(*TicketActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ResourceService/DeleteTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteTicket(ctx, req.(*TicketActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_CheckTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CheckTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ResourceService/CheckTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CheckTicket(ctx, req.(*TicketActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListTickets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TicketActionMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).ListTickets(m, &resourceServiceListTicketsServer{stream})
}

type ResourceService_ListTicketsServer interface {
	Send(*TicketListResultMsg) error
	grpc.ServerStream
}

type resourceServiceListTicketsServer struct {
	grpc.ServerStream
}

func (x *resourceServiceListTicketsServer) Send(m *TicketListResultMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _ResourceService_SetFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).SetFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ResourceService/SetFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).SetFlag(ctx, req.(*FlagActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListFlags_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FlagActionMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).ListFlags(m, &resourceServiceListFlagsServer{stream})
}

type ResourceService_ListFlagsServer interface {
	Send(*FlagListResultMsg) error
	grpc.ServerStream
}

type resourceServiceListFlagsServer struct {
	grpc.ServerStream
}

func (x *resourceServiceListFlagsServer) Send(m *FlagListResultMsg) error {
	return x.ServerStream.SendMsg(m)
}

var _ResourceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ResourceService",
	HandlerType: (*ResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTicket",
			Handler:    _ResourceService_AddTicket_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _ResourceService_DeleteTicket_Handler,
		},
		{
			MethodName: "CheckTicket",
			Handler:    _ResourceService_CheckTicket_Handler,
		},
		{
			MethodName: "SetFlag",
			Handler:    _ResourceService_SetFlag_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTickets",
			Handler:       _ResourceService_ListTickets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListFlags",
			Handler:       _ResourceService_ListFlags_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/services.proto",
}

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskServiceClient interface {
	OrderTask(ctx context.Context, in *TaskOrderMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	ForceTask(ctx context.Context, in *TaskOrderMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	RerunTask(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	HoldTask(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	FreeTask(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	SetToOk(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	ListTasks(ctx context.Context, in *TaskFilterMsg, opts ...grpc.CallOption) (TaskService_ListTasksClient, error)
	TaskDetail(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*TaskDetailResultMsg, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) OrderTask(ctx context.Context, in *TaskOrderMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.TaskService/OrderTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ForceTask(ctx context.Context, in *TaskOrderMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.TaskService/ForceTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RerunTask(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.TaskService/RerunTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) HoldTask(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.TaskService/HoldTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FreeTask(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.TaskService/FreeTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) SetToOk(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.TaskService/SetToOk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTasks(ctx context.Context, in *TaskFilterMsg, opts ...grpc.CallOption) (TaskService_ListTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TaskService_serviceDesc.Streams[0], "/proto.TaskService/ListTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskServiceListTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskService_ListTasksClient interface {
	Recv() (*TaskListResultMsg, error)
	grpc.ClientStream
}

type taskServiceListTasksClient struct {
	grpc.ClientStream
}

func (x *taskServiceListTasksClient) Recv() (*TaskListResultMsg, error) {
	m := new(TaskListResultMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskServiceClient) TaskDetail(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*TaskDetailResultMsg, error) {
	out := new(TaskDetailResultMsg)
	err := c.cc.Invoke(ctx, "/proto.TaskService/TaskDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
type TaskServiceServer interface {
	OrderTask(context.Context, *TaskOrderMsg) (*ActionResultMsg, error)
	ForceTask(context.Context, *TaskOrderMsg) (*ActionResultMsg, error)
	RerunTask(context.Context, *TaskActionMsg) (*ActionResultMsg, error)
	HoldTask(context.Context, *TaskActionMsg) (*ActionResultMsg, error)
	FreeTask(context.Context, *TaskActionMsg) (*ActionResultMsg, error)
	SetToOk(context.Context, *TaskActionMsg) (*ActionResultMsg, error)
	ListTasks(*TaskFilterMsg, TaskService_ListTasksServer) error
	TaskDetail(context.Context, *TaskActionMsg) (*TaskDetailResultMsg, error)
}

// UnimplementedTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (*UnimplementedTaskServiceServer) OrderTask(context.Context, *TaskOrderMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderTask not implemented")
}
func (*UnimplementedTaskServiceServer) ForceTask(context.Context, *TaskOrderMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceTask not implemented")
}
func (*UnimplementedTaskServiceServer) RerunTask(context.Context, *TaskActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RerunTask not implemented")
}
func (*UnimplementedTaskServiceServer) HoldTask(context.Context, *TaskActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HoldTask not implemented")
}
func (*UnimplementedTaskServiceServer) FreeTask(context.Context, *TaskActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreeTask not implemented")
}
func (*UnimplementedTaskServiceServer) SetToOk(context.Context, *TaskActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetToOk not implemented")
}
func (*UnimplementedTaskServiceServer) ListTasks(*TaskFilterMsg, TaskService_ListTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (*UnimplementedTaskServiceServer) TaskDetail(context.Context, *TaskActionMsg) (*TaskDetailResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskDetail not implemented")
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_OrderTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskOrderMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).OrderTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/OrderTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).OrderTask(ctx, req.(*TaskOrderMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ForceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskOrderMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ForceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/ForceTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ForceTask(ctx, req.(*TaskOrderMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RerunTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RerunTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/RerunTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RerunTask(ctx, req.(*TaskActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_HoldTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).HoldTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/HoldTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).HoldTask(ctx, req.(*TaskActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FreeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FreeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/FreeTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FreeTask(ctx, req.(*TaskActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_SetToOk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SetToOk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/SetToOk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SetToOk(ctx, req.(*TaskActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskFilterMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskServiceServer).ListTasks(m, &taskServiceListTasksServer{stream})
}

type TaskService_ListTasksServer interface {
	Send(*TaskListResultMsg) error
	grpc.ServerStream
}

type taskServiceListTasksServer struct {
	grpc.ServerStream
}

func (x *taskServiceListTasksServer) Send(m *TaskListResultMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _TaskService_TaskDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).TaskDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/TaskDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).TaskDetail(ctx, req.(*TaskActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderTask",
			Handler:    _TaskService_OrderTask_Handler,
		},
		{
			MethodName: "ForceTask",
			Handler:    _TaskService_ForceTask_Handler,
		},
		{
			MethodName: "RerunTask",
			Handler:    _TaskService_RerunTask_Handler,
		},
		{
			MethodName: "HoldTask",
			Handler:    _TaskService_HoldTask_Handler,
		},
		{
			MethodName: "FreeTask",
			Handler:    _TaskService_FreeTask_Handler,
		},
		{
			MethodName: "SetToOk",
			Handler:    _TaskService_SetToOk_Handler,
		},
		{
			MethodName: "TaskDetail",
			Handler:    _TaskService_TaskDetail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTasks",
			Handler:       _TaskService_ListTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/services.proto",
}

// DefinitionServiceClient is the client API for DefinitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DefinitionServiceClient interface {
	GetDefinition(ctx context.Context, in *DefinitionActionMsg, opts ...grpc.CallOption) (*DefinitionResultMsg, error)
	LockDefinition(ctx context.Context, in *DefinitionActionMsg, opts ...grpc.CallOption) (*LockResultMsg, error)
	UnlockDefinition(ctx context.Context, in *DefinitionActionMsg, opts ...grpc.CallOption) (*LockResultMsg, error)
	ListGroups(ctx context.Context, in *GroupActionMsg, opts ...grpc.CallOption) (DefinitionService_ListGroupsClient, error)
	ListDefinitionsFromGroup(ctx context.Context, in *DefinitionActionMsg, opts ...grpc.CallOption) (DefinitionService_ListDefinitionsFromGroupClient, error)
}

type definitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDefinitionServiceClient(cc grpc.ClientConnInterface) DefinitionServiceClient {
	return &definitionServiceClient{cc}
}

func (c *definitionServiceClient) GetDefinition(ctx context.Context, in *DefinitionActionMsg, opts ...grpc.CallOption) (*DefinitionResultMsg, error) {
	out := new(DefinitionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.DefinitionService/GetDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *definitionServiceClient) LockDefinition(ctx context.Context, in *DefinitionActionMsg, opts ...grpc.CallOption) (*LockResultMsg, error) {
	out := new(LockResultMsg)
	err := c.cc.Invoke(ctx, "/proto.DefinitionService/LockDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *definitionServiceClient) UnlockDefinition(ctx context.Context, in *DefinitionActionMsg, opts ...grpc.CallOption) (*LockResultMsg, error) {
	out := new(LockResultMsg)
	err := c.cc.Invoke(ctx, "/proto.DefinitionService/UnlockDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *definitionServiceClient) ListGroups(ctx context.Context, in *GroupActionMsg, opts ...grpc.CallOption) (DefinitionService_ListGroupsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DefinitionService_serviceDesc.Streams[0], "/proto.DefinitionService/ListGroups", opts...)
	if err != nil {
		return nil, err
	}
	x := &definitionServiceListGroupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DefinitionService_ListGroupsClient interface {
	Recv() (*DefinitionListGroupResultMsg, error)
	grpc.ClientStream
}

type definitionServiceListGroupsClient struct {
	grpc.ClientStream
}

func (x *definitionServiceListGroupsClient) Recv() (*DefinitionListGroupResultMsg, error) {
	m := new(DefinitionListGroupResultMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *definitionServiceClient) ListDefinitionsFromGroup(ctx context.Context, in *DefinitionActionMsg, opts ...grpc.CallOption) (DefinitionService_ListDefinitionsFromGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DefinitionService_serviceDesc.Streams[1], "/proto.DefinitionService/ListDefinitionsFromGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &definitionServiceListDefinitionsFromGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DefinitionService_ListDefinitionsFromGroupClient interface {
	Recv() (*DefinitionListResultMsg, error)
	grpc.ClientStream
}

type definitionServiceListDefinitionsFromGroupClient struct {
	grpc.ClientStream
}

func (x *definitionServiceListDefinitionsFromGroupClient) Recv() (*DefinitionListResultMsg, error) {
	m := new(DefinitionListResultMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DefinitionServiceServer is the server API for DefinitionService service.
type DefinitionServiceServer interface {
	GetDefinition(context.Context, *DefinitionActionMsg) (*DefinitionResultMsg, error)
	LockDefinition(context.Context, *DefinitionActionMsg) (*LockResultMsg, error)
	UnlockDefinition(context.Context, *DefinitionActionMsg) (*LockResultMsg, error)
	ListGroups(*GroupActionMsg, DefinitionService_ListGroupsServer) error
	ListDefinitionsFromGroup(*DefinitionActionMsg, DefinitionService_ListDefinitionsFromGroupServer) error
}

// UnimplementedDefinitionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDefinitionServiceServer struct {
}

func (*UnimplementedDefinitionServiceServer) GetDefinition(context.Context, *DefinitionActionMsg) (*DefinitionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefinition not implemented")
}
func (*UnimplementedDefinitionServiceServer) LockDefinition(context.Context, *DefinitionActionMsg) (*LockResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockDefinition not implemented")
}
func (*UnimplementedDefinitionServiceServer) UnlockDefinition(context.Context, *DefinitionActionMsg) (*LockResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockDefinition not implemented")
}
func (*UnimplementedDefinitionServiceServer) ListGroups(*GroupActionMsg, DefinitionService_ListGroupsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (*UnimplementedDefinitionServiceServer) ListDefinitionsFromGroup(*DefinitionActionMsg, DefinitionService_ListDefinitionsFromGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDefinitionsFromGroup not implemented")
}

func RegisterDefinitionServiceServer(s *grpc.Server, srv DefinitionServiceServer) {
	s.RegisterService(&_DefinitionService_serviceDesc, srv)
}

func _DefinitionService_GetDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefinitionActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefinitionServiceServer).GetDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DefinitionService/GetDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefinitionServiceServer).GetDefinition(ctx, req.(*DefinitionActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefinitionService_LockDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefinitionActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefinitionServiceServer).LockDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DefinitionService/LockDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefinitionServiceServer).LockDefinition(ctx, req.(*DefinitionActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefinitionService_UnlockDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefinitionActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefinitionServiceServer).UnlockDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DefinitionService/UnlockDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefinitionServiceServer).UnlockDefinition(ctx, req.(*DefinitionActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefinitionService_ListGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GroupActionMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DefinitionServiceServer).ListGroups(m, &definitionServiceListGroupsServer{stream})
}

type DefinitionService_ListGroupsServer interface {
	Send(*DefinitionListGroupResultMsg) error
	grpc.ServerStream
}

type definitionServiceListGroupsServer struct {
	grpc.ServerStream
}

func (x *definitionServiceListGroupsServer) Send(m *DefinitionListGroupResultMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _DefinitionService_ListDefinitionsFromGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DefinitionActionMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DefinitionServiceServer).ListDefinitionsFromGroup(m, &definitionServiceListDefinitionsFromGroupServer{stream})
}

type DefinitionService_ListDefinitionsFromGroupServer interface {
	Send(*DefinitionListResultMsg) error
	grpc.ServerStream
}

type definitionServiceListDefinitionsFromGroupServer struct {
	grpc.ServerStream
}

func (x *definitionServiceListDefinitionsFromGroupServer) Send(m *DefinitionListResultMsg) error {
	return x.ServerStream.SendMsg(m)
}

var _DefinitionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DefinitionService",
	HandlerType: (*DefinitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefinition",
			Handler:    _DefinitionService_GetDefinition_Handler,
		},
		{
			MethodName: "LockDefinition",
			Handler:    _DefinitionService_LockDefinition_Handler,
		},
		{
			MethodName: "UnlockDefinition",
			Handler:    _DefinitionService_UnlockDefinition_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListGroups",
			Handler:       _DefinitionService_ListGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListDefinitionsFromGroup",
			Handler:       _DefinitionService_ListDefinitionsFromGroup_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/services.proto",
}
