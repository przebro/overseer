// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: services.proto

package services

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FilterMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *FilterMsg) Reset() {
	*x = FilterMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterMsg) ProtoMessage() {}

func (x *FilterMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterMsg.ProtoReflect.Descriptor instead.
func (*FilterMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{0}
}

func (x *FilterMsg) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type AuthorizeActionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AuthorizeActionMsg) Reset() {
	*x = AuthorizeActionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeActionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeActionMsg) ProtoMessage() {}

func (x *AuthorizeActionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeActionMsg.ProtoReflect.Descriptor instead.
func (*AuthorizeActionMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{1}
}

func (x *AuthorizeActionMsg) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuthorizeActionMsg) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type TicketActionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Odate string `protobuf:"bytes,2,opt,name=odate,proto3" json:"odate,omitempty"`
}

func (x *TicketActionMsg) Reset() {
	*x = TicketActionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketActionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketActionMsg) ProtoMessage() {}

func (x *TicketActionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketActionMsg.ProtoReflect.Descriptor instead.
func (*TicketActionMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{2}
}

func (x *TicketActionMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TicketActionMsg) GetOdate() string {
	if x != nil {
		return x.Odate
	}
	return ""
}

type FlagActionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State int32  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *FlagActionMsg) Reset() {
	*x = FlagActionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagActionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagActionMsg) ProtoMessage() {}

func (x *FlagActionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagActionMsg.ProtoReflect.Descriptor instead.
func (*FlagActionMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{3}
}

func (x *FlagActionMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlagActionMsg) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type TaskActionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *TaskActionMsg) Reset() {
	*x = TaskActionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskActionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskActionMsg) ProtoMessage() {}

func (x *TaskActionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskActionMsg.ProtoReflect.Descriptor instead.
func (*TaskActionMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{4}
}

func (x *TaskActionMsg) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

type TaskFilterMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group     string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TaskID    string `protobuf:"bytes,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
	OdateFrom string `protobuf:"bytes,4,opt,name=odateFrom,proto3" json:"odateFrom,omitempty"`
	OdateTo   string `protobuf:"bytes,5,opt,name=odateTo,proto3" json:"odateTo,omitempty"`
	Status    uint32 `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TaskFilterMsg) Reset() {
	*x = TaskFilterMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFilterMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFilterMsg) ProtoMessage() {}

func (x *TaskFilterMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFilterMsg.ProtoReflect.Descriptor instead.
func (*TaskFilterMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{5}
}

func (x *TaskFilterMsg) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *TaskFilterMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskFilterMsg) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TaskFilterMsg) GetOdateFrom() string {
	if x != nil {
		return x.OdateFrom
	}
	return ""
}

func (x *TaskFilterMsg) GetOdateTo() string {
	if x != nil {
		return x.OdateTo
	}
	return ""
}

func (x *TaskFilterMsg) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type TaskOrderMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskGroup string `protobuf:"bytes,1,opt,name=taskGroup,proto3" json:"taskGroup,omitempty"`
	TaskName  string `protobuf:"bytes,2,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Odate     string `protobuf:"bytes,3,opt,name=odate,proto3" json:"odate,omitempty"`
}

func (x *TaskOrderMsg) Reset() {
	*x = TaskOrderMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOrderMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOrderMsg) ProtoMessage() {}

func (x *TaskOrderMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOrderMsg.ProtoReflect.Descriptor instead.
func (*TaskOrderMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{6}
}

func (x *TaskOrderMsg) GetTaskGroup() string {
	if x != nil {
		return x.TaskGroup
	}
	return ""
}

func (x *TaskOrderMsg) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskOrderMsg) GetOdate() string {
	if x != nil {
		return x.Odate
	}
	return ""
}

type DefinitionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName string `protobuf:"bytes,1,opt,name=groupName,proto3" json:"groupName,omitempty"`
	TaskName  string `protobuf:"bytes,2,opt,name=taskName,proto3" json:"taskName,omitempty"`
	LockID    uint32 `protobuf:"varint,3,opt,name=lockID,proto3" json:"lockID,omitempty"`
}

func (x *DefinitionMsg) Reset() {
	*x = DefinitionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionMsg) ProtoMessage() {}

func (x *DefinitionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionMsg.ProtoReflect.Descriptor instead.
func (*DefinitionMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{7}
}

func (x *DefinitionMsg) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *DefinitionMsg) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *DefinitionMsg) GetLockID() uint32 {
	if x != nil {
		return x.LockID
	}
	return 0
}

type DefinitionActionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token         string           `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	DefinitionMsg []*DefinitionMsg `protobuf:"bytes,2,rep,name=definitionMsg,proto3" json:"definitionMsg,omitempty"`
}

func (x *DefinitionActionMsg) Reset() {
	*x = DefinitionActionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionActionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionActionMsg) ProtoMessage() {}

func (x *DefinitionActionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionActionMsg.ProtoReflect.Descriptor instead.
func (*DefinitionActionMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{8}
}

func (x *DefinitionActionMsg) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DefinitionActionMsg) GetDefinitionMsg() []*DefinitionMsg {
	if x != nil {
		return x.DefinitionMsg
	}
	return nil
}

type LockResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	LockID  uint32 `protobuf:"varint,2,opt,name=lockID,proto3" json:"lockID,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LockResult) Reset() {
	*x = LockResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockResult) ProtoMessage() {}

func (x *LockResult) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockResult.ProtoReflect.Descriptor instead.
func (*LockResult) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{9}
}

func (x *LockResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LockResult) GetLockID() uint32 {
	if x != nil {
		return x.LockID
	}
	return 0
}

func (x *LockResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type LockResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockResult []*LockResult `protobuf:"bytes,1,rep,name=lockResult,proto3" json:"lockResult,omitempty"`
}

func (x *LockResultMsg) Reset() {
	*x = LockResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockResultMsg) ProtoMessage() {}

func (x *LockResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockResultMsg.ProtoReflect.Descriptor instead.
func (*LockResultMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{10}
}

func (x *LockResultMsg) GetLockResult() []*LockResult {
	if x != nil {
		return x.LockResult
	}
	return nil
}

type DefinitionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DefinitionResult) Reset() {
	*x = DefinitionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionResult) ProtoMessage() {}

func (x *DefinitionResult) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionResult.ProtoReflect.Descriptor instead.
func (*DefinitionResult) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{11}
}

func (x *DefinitionResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DefinitionResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DefinitionResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefinitionMsg []*DefinitionResult `protobuf:"bytes,1,rep,name=definitionMsg,proto3" json:"definitionMsg,omitempty"`
}

func (x *DefinitionResultMsg) Reset() {
	*x = DefinitionResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionResultMsg) ProtoMessage() {}

func (x *DefinitionResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionResultMsg.ProtoReflect.Descriptor instead.
func (*DefinitionResultMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{12}
}

func (x *DefinitionResultMsg) GetDefinitionMsg() []*DefinitionResult {
	if x != nil {
		return x.DefinitionMsg
	}
	return nil
}

type ActionResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ActionResultMsg) Reset() {
	*x = ActionResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResultMsg) ProtoMessage() {}

func (x *ActionResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResultMsg.ProtoReflect.Descriptor instead.
func (*ActionResultMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{13}
}

func (x *ActionResultMsg) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ActionResultMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type FlagListResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlagName string `protobuf:"bytes,1,opt,name=flagName,proto3" json:"flagName,omitempty"`
	State    int32  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *FlagListResultMsg) Reset() {
	*x = FlagListResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagListResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagListResultMsg) ProtoMessage() {}

func (x *FlagListResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagListResultMsg.ProtoReflect.Descriptor instead.
func (*FlagListResultMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{14}
}

func (x *FlagListResultMsg) GetFlagName() string {
	if x != nil {
		return x.FlagName
	}
	return ""
}

func (x *FlagListResultMsg) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type TicketListResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Odate string `protobuf:"bytes,2,opt,name=odate,proto3" json:"odate,omitempty"`
}

func (x *TicketListResultMsg) Reset() {
	*x = TicketListResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketListResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketListResultMsg) ProtoMessage() {}

func (x *TicketListResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketListResultMsg.ProtoReflect.Descriptor instead.
func (*TicketListResultMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{15}
}

func (x *TicketListResultMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TicketListResultMsg) GetOdate() string {
	if x != nil {
		return x.Odate
	}
	return ""
}

type TaskListResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName  string `protobuf:"bytes,1,opt,name=groupName,proto3" json:"groupName,omitempty"`
	TaskName   string `protobuf:"bytes,2,opt,name=taskName,proto3" json:"taskName,omitempty"`
	TaskId     string `protobuf:"bytes,3,opt,name=taskId,proto3" json:"taskId,omitempty"`
	OrderDate  string `protobuf:"bytes,4,opt,name=orderDate,proto3" json:"orderDate,omitempty"`
	TaskStatus int32  `protobuf:"varint,5,opt,name=taskStatus,proto3" json:"taskStatus,omitempty"`
	RunNumber  int32  `protobuf:"varint,6,opt,name=runNumber,proto3" json:"runNumber,omitempty"`
	Waiting    string `protobuf:"bytes,7,opt,name=waiting,proto3" json:"waiting,omitempty"`
	Held       bool   `protobuf:"varint,8,opt,name=held,proto3" json:"held,omitempty"`
	Confirmed  bool   `protobuf:"varint,9,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
}

func (x *TaskListResultMsg) Reset() {
	*x = TaskListResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskListResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListResultMsg) ProtoMessage() {}

func (x *TaskListResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListResultMsg.ProtoReflect.Descriptor instead.
func (*TaskListResultMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{16}
}

func (x *TaskListResultMsg) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *TaskListResultMsg) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskListResultMsg) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskListResultMsg) GetOrderDate() string {
	if x != nil {
		return x.OrderDate
	}
	return ""
}

func (x *TaskListResultMsg) GetTaskStatus() int32 {
	if x != nil {
		return x.TaskStatus
	}
	return 0
}

func (x *TaskListResultMsg) GetRunNumber() int32 {
	if x != nil {
		return x.RunNumber
	}
	return 0
}

func (x *TaskListResultMsg) GetWaiting() string {
	if x != nil {
		return x.Waiting
	}
	return ""
}

func (x *TaskListResultMsg) GetHeld() bool {
	if x != nil {
		return x.Held
	}
	return false
}

func (x *TaskListResultMsg) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

type TaskResourcesMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Odate     string `protobuf:"bytes,3,opt,name=odate,proto3" json:"odate,omitempty"`
	Satisfied bool   `protobuf:"varint,5,opt,name=satisfied,proto3" json:"satisfied,omitempty"`
}

func (x *TaskResourcesMsg) Reset() {
	*x = TaskResourcesMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResourcesMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResourcesMsg) ProtoMessage() {}

func (x *TaskResourcesMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResourcesMsg.ProtoReflect.Descriptor instead.
func (*TaskResourcesMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{17}
}

func (x *TaskResourcesMsg) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TaskResourcesMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskResourcesMsg) GetOdate() string {
	if x != nil {
		return x.Odate
	}
	return ""
}

func (x *TaskResourcesMsg) GetSatisfied() bool {
	if x != nil {
		return x.Satisfied
	}
	return false
}

type TaskDetailResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      *ActionResultMsg    `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	BaseData    *TaskListResultMsg  `protobuf:"bytes,2,opt,name=baseData,proto3" json:"baseData,omitempty"`
	Description string              `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	From        string              `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To          string              `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	StartTime   string              `protobuf:"bytes,6,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime     string              `protobuf:"bytes,7,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Worker      string              `protobuf:"bytes,8,opt,name=worker,proto3" json:"worker,omitempty"`
	Resources   []*TaskResourcesMsg `protobuf:"bytes,9,rep,name=resources,proto3" json:"resources,omitempty"`
	Output      []string            `protobuf:"bytes,10,rep,name=output,proto3" json:"output,omitempty"`
}

func (x *TaskDetailResultMsg) Reset() {
	*x = TaskDetailResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDetailResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDetailResultMsg) ProtoMessage() {}

func (x *TaskDetailResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDetailResultMsg.ProtoReflect.Descriptor instead.
func (*TaskDetailResultMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{18}
}

func (x *TaskDetailResultMsg) GetResult() *ActionResultMsg {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TaskDetailResultMsg) GetBaseData() *TaskListResultMsg {
	if x != nil {
		return x.BaseData
	}
	return nil
}

func (x *TaskDetailResultMsg) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskDetailResultMsg) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TaskDetailResultMsg) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TaskDetailResultMsg) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TaskDetailResultMsg) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *TaskDetailResultMsg) GetWorker() string {
	if x != nil {
		return x.Worker
	}
	return ""
}

func (x *TaskDetailResultMsg) GetResources() []*TaskResourcesMsg {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *TaskDetailResultMsg) GetOutput() []string {
	if x != nil {
		return x.Output
	}
	return nil
}

type DefinitionListGroupResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName string `protobuf:"bytes,1,opt,name=groupName,proto3" json:"groupName,omitempty"`
}

func (x *DefinitionListGroupResultMsg) Reset() {
	*x = DefinitionListGroupResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionListGroupResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionListGroupResultMsg) ProtoMessage() {}

func (x *DefinitionListGroupResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionListGroupResultMsg.ProtoReflect.Descriptor instead.
func (*DefinitionListGroupResultMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{19}
}

func (x *DefinitionListGroupResultMsg) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type DefinitionListResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName string `protobuf:"bytes,1,opt,name=groupName,proto3" json:"groupName,omitempty"`
	TaskName  string `protobuf:"bytes,2,opt,name=taskName,proto3" json:"taskName,omitempty"`
}

func (x *DefinitionListResultMsg) Reset() {
	*x = DefinitionListResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionListResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionListResultMsg) ProtoMessage() {}

func (x *DefinitionListResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionListResultMsg.ProtoReflect.Descriptor instead.
func (*DefinitionListResultMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{20}
}

func (x *DefinitionListResultMsg) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *DefinitionListResultMsg) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type UserAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Fullname string   `protobuf:"bytes,2,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Email    string   `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Enabled  bool     `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Roles    []string `protobuf:"bytes,7,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *UserAccount) Reset() {
	*x = UserAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccount) ProtoMessage() {}

func (x *UserAccount) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccount.ProtoReflect.Descriptor instead.
func (*UserAccount) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{21}
}

func (x *UserAccount) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserAccount) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *UserAccount) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserAccount) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *UserAccount) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type ChangePassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldPassword string `protobuf:"bytes,1,opt,name=oldPassword,proto3" json:"oldPassword,omitempty"`
	NewPassword string `protobuf:"bytes,2,opt,name=newPassword,proto3" json:"newPassword,omitempty"`
}

func (x *ChangePassword) Reset() {
	*x = ChangePassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePassword) ProtoMessage() {}

func (x *ChangePassword) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePassword.ProtoReflect.Descriptor instead.
func (*ChangePassword) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{22}
}

func (x *ChangePassword) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *ChangePassword) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type CreateUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     *UserAccount `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password string       `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *CreateUserMsg) Reset() {
	*x = CreateUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserMsg) ProtoMessage() {}

func (x *CreateUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserMsg.ProtoReflect.Descriptor instead.
func (*CreateUserMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{23}
}

func (x *CreateUserMsg) GetUser() *UserAccount {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CreateUserMsg) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ModifyUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     *UserAccount    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password *ChangePassword `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ModifyUserMsg) Reset() {
	*x = ModifyUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyUserMsg) ProtoMessage() {}

func (x *ModifyUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyUserMsg.ProtoReflect.Descriptor instead.
func (*ModifyUserMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{24}
}

func (x *ModifyUserMsg) GetUser() *UserAccount {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ModifyUserMsg) GetPassword() *ChangePassword {
	if x != nil {
		return x.Password
	}
	return nil
}

type UserResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *UserAccount `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UserResultMsg) Reset() {
	*x = UserResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResultMsg) ProtoMessage() {}

func (x *UserResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResultMsg.ProtoReflect.Descriptor instead.
func (*UserResultMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{25}
}

func (x *UserResultMsg) GetUser() *UserAccount {
	if x != nil {
		return x.User
	}
	return nil
}

type UserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *UserMsg) Reset() {
	*x = UserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMsg) ProtoMessage() {}

func (x *UserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMsg.ProtoReflect.Descriptor instead.
func (*UserMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{26}
}

func (x *UserMsg) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type UserAccountMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *UserAccount `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UserAccountMsg) Reset() {
	*x = UserAccountMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountMsg) ProtoMessage() {}

func (x *UserAccountMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountMsg.ProtoReflect.Descriptor instead.
func (*UserAccountMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{27}
}

func (x *UserAccountMsg) GetUser() *UserAccount {
	if x != nil {
		return x.User
	}
	return nil
}

type EntityMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *EntityMsg) Reset() {
	*x = EntityMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityMsg) ProtoMessage() {}

func (x *EntityMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityMsg.ProtoReflect.Descriptor instead.
func (*EntityMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{28}
}

func (x *EntityMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EntityMsg) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ListEntityResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity []*EntityMsg `protobuf:"bytes,1,rep,name=entity,proto3" json:"entity,omitempty"`
}

func (x *ListEntityResultMsg) Reset() {
	*x = ListEntityResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntityResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntityResultMsg) ProtoMessage() {}

func (x *ListEntityResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntityResultMsg.ProtoReflect.Descriptor instead.
func (*ListEntityResultMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{29}
}

func (x *ListEntityResultMsg) GetEntity() []*EntityMsg {
	if x != nil {
		return x.Entity
	}
	return nil
}

type RoleMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rolename string `protobuf:"bytes,1,opt,name=rolename,proto3" json:"rolename,omitempty"`
}

func (x *RoleMsg) Reset() {
	*x = RoleMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleMsg) ProtoMessage() {}

func (x *RoleMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleMsg.ProtoReflect.Descriptor instead.
func (*RoleMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{30}
}

func (x *RoleMsg) GetRolename() string {
	if x != nil {
		return x.Rolename
	}
	return ""
}

type RoleDefinitionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role           *RoleMsg `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Description    string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Administration bool     `protobuf:"varint,3,opt,name=administration,proto3" json:"administration,omitempty"`
	Restart        bool     `protobuf:"varint,4,opt,name=restart,proto3" json:"restart,omitempty"`
	SetToOk        bool     `protobuf:"varint,5,opt,name=setToOk,proto3" json:"setToOk,omitempty"`
	AddTicket      bool     `protobuf:"varint,6,opt,name=addTicket,proto3" json:"addTicket,omitempty"`
	RemoveTicket   bool     `protobuf:"varint,7,opt,name=removeTicket,proto3" json:"removeTicket,omitempty"`
	SetFlag        bool     `protobuf:"varint,8,opt,name=setFlag,proto3" json:"setFlag,omitempty"`
	Confirm        bool     `protobuf:"varint,9,opt,name=confirm,proto3" json:"confirm,omitempty"`
	Order          bool     `protobuf:"varint,10,opt,name=order,proto3" json:"order,omitempty"`
	Force          bool     `protobuf:"varint,11,opt,name=force,proto3" json:"force,omitempty"`
	Definition     bool     `protobuf:"varint,12,opt,name=definition,proto3" json:"definition,omitempty"`
	Hold           bool     `protobuf:"varint,13,opt,name=hold,proto3" json:"hold,omitempty"`
	Free           bool     `protobuf:"varint,14,opt,name=free,proto3" json:"free,omitempty"`
	Bypass         bool     `protobuf:"varint,15,opt,name=bypass,proto3" json:"bypass,omitempty"`
}

func (x *RoleDefinitionMsg) Reset() {
	*x = RoleDefinitionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleDefinitionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleDefinitionMsg) ProtoMessage() {}

func (x *RoleDefinitionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleDefinitionMsg.ProtoReflect.Descriptor instead.
func (*RoleDefinitionMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{31}
}

func (x *RoleDefinitionMsg) GetRole() *RoleMsg {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *RoleDefinitionMsg) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RoleDefinitionMsg) GetAdministration() bool {
	if x != nil {
		return x.Administration
	}
	return false
}

func (x *RoleDefinitionMsg) GetRestart() bool {
	if x != nil {
		return x.Restart
	}
	return false
}

func (x *RoleDefinitionMsg) GetSetToOk() bool {
	if x != nil {
		return x.SetToOk
	}
	return false
}

func (x *RoleDefinitionMsg) GetAddTicket() bool {
	if x != nil {
		return x.AddTicket
	}
	return false
}

func (x *RoleDefinitionMsg) GetRemoveTicket() bool {
	if x != nil {
		return x.RemoveTicket
	}
	return false
}

func (x *RoleDefinitionMsg) GetSetFlag() bool {
	if x != nil {
		return x.SetFlag
	}
	return false
}

func (x *RoleDefinitionMsg) GetConfirm() bool {
	if x != nil {
		return x.Confirm
	}
	return false
}

func (x *RoleDefinitionMsg) GetOrder() bool {
	if x != nil {
		return x.Order
	}
	return false
}

func (x *RoleDefinitionMsg) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *RoleDefinitionMsg) GetDefinition() bool {
	if x != nil {
		return x.Definition
	}
	return false
}

func (x *RoleDefinitionMsg) GetHold() bool {
	if x != nil {
		return x.Hold
	}
	return false
}

func (x *RoleDefinitionMsg) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

func (x *RoleDefinitionMsg) GetBypass() bool {
	if x != nil {
		return x.Bypass
	}
	return false
}

type RoleResultMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role *RoleDefinitionMsg `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *RoleResultMsg) Reset() {
	*x = RoleResultMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleResultMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleResultMsg) ProtoMessage() {}

func (x *RoleResultMsg) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleResultMsg.ProtoReflect.Descriptor instead.
func (*RoleResultMsg) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{32}
}

func (x *RoleResultMsg) GetRole() *RoleDefinitionMsg {
	if x != nil {
		return x.Role
	}
	return nil
}

var File_services_proto protoreflect.FileDescriptor

var file_services_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x12, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x3b, 0x0a, 0x0f, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x39, 0x0a, 0x0d, 0x46, 0x6c, 0x61, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x27, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0xa1, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x6f, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5e, 0x0a, 0x0c,
	0x54, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x61, 0x0a, 0x0d,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x22,
	0x67, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x0d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x22, 0x58, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x42, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x46, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x54,
	0x0a, 0x13, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x67, 0x22, 0x45, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x11, 0x46,
	0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x3f, 0x0a, 0x13, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x64,
	0x61, 0x74, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x75,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x68, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x22, 0x6e, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66,
	0x69, 0x65, 0x64, 0x22, 0xe0, 0x02, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4d, 0x73, 0x67, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x4d, 0x73, 0x67, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3c, 0x0a, 0x1c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x17, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6c, 0x64,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x53, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x26,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x6a, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x37,
	0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x25, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38,
	0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x67,
	0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d,
	0x73, 0x67, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x25, 0x0a, 0x07,
	0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xb7, 0x03, 0x0a, 0x11, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x4f, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x4f, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x22, 0x3d, 0x0a,
	0x0d, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x2c,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x32, 0x5a, 0x0a, 0x13,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x32, 0xd5, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x09,
	0x41, 0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73,
	0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x67, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x30, 0x01,
	0x32, 0xb7, 0x04, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3a, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x09,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x09, 0x52, 0x65, 0x72, 0x75,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x08, 0x46, 0x72, 0x65, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x39, 0x0a,
	0x07, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x4f, 0x6b, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x32, 0x91, 0x03, 0x0a, 0x11, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x49, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0e, 0x4c,
	0x6f, 0x63, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22,
	0x00, 0x12, 0x46, 0x0a, 0x10, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x67, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x5a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x30, 0x01, 0x32, 0xe7,
	0x04, 0x0a, 0x15, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d,
	0x73, 0x67, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x40,
	0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00,
	0x12, 0x36, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x73, 0x67,
	0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x32, 0x53, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x4f, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x42, 0x10, 0x5a,
	0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_proto_rawDescOnce sync.Once
	file_services_proto_rawDescData = file_services_proto_rawDesc
)

func file_services_proto_rawDescGZIP() []byte {
	file_services_proto_rawDescOnce.Do(func() {
		file_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_proto_rawDescData)
	})
	return file_services_proto_rawDescData
}

var file_services_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_services_proto_goTypes = []interface{}{
	(*FilterMsg)(nil),                    // 0: proto.FilterMsg
	(*AuthorizeActionMsg)(nil),           // 1: proto.AuthorizeActionMsg
	(*TicketActionMsg)(nil),              // 2: proto.TicketActionMsg
	(*FlagActionMsg)(nil),                // 3: proto.FlagActionMsg
	(*TaskActionMsg)(nil),                // 4: proto.TaskActionMsg
	(*TaskFilterMsg)(nil),                // 5: proto.TaskFilterMsg
	(*TaskOrderMsg)(nil),                 // 6: proto.TaskOrderMsg
	(*DefinitionMsg)(nil),                // 7: proto.DefinitionMsg
	(*DefinitionActionMsg)(nil),          // 8: proto.DefinitionActionMsg
	(*LockResult)(nil),                   // 9: proto.LockResult
	(*LockResultMsg)(nil),                // 10: proto.LockResultMsg
	(*DefinitionResult)(nil),             // 11: proto.DefinitionResult
	(*DefinitionResultMsg)(nil),          // 12: proto.DefinitionResultMsg
	(*ActionResultMsg)(nil),              // 13: proto.ActionResultMsg
	(*FlagListResultMsg)(nil),            // 14: proto.FlagListResultMsg
	(*TicketListResultMsg)(nil),          // 15: proto.TicketListResultMsg
	(*TaskListResultMsg)(nil),            // 16: proto.TaskListResultMsg
	(*TaskResourcesMsg)(nil),             // 17: proto.TaskResourcesMsg
	(*TaskDetailResultMsg)(nil),          // 18: proto.TaskDetailResultMsg
	(*DefinitionListGroupResultMsg)(nil), // 19: proto.DefinitionListGroupResultMsg
	(*DefinitionListResultMsg)(nil),      // 20: proto.DefinitionListResultMsg
	(*UserAccount)(nil),                  // 21: proto.UserAccount
	(*ChangePassword)(nil),               // 22: proto.ChangePassword
	(*CreateUserMsg)(nil),                // 23: proto.CreateUserMsg
	(*ModifyUserMsg)(nil),                // 24: proto.ModifyUserMsg
	(*UserResultMsg)(nil),                // 25: proto.UserResultMsg
	(*UserMsg)(nil),                      // 26: proto.UserMsg
	(*UserAccountMsg)(nil),               // 27: proto.UserAccountMsg
	(*EntityMsg)(nil),                    // 28: proto.EntityMsg
	(*ListEntityResultMsg)(nil),          // 29: proto.ListEntityResultMsg
	(*RoleMsg)(nil),                      // 30: proto.RoleMsg
	(*RoleDefinitionMsg)(nil),            // 31: proto.RoleDefinitionMsg
	(*RoleResultMsg)(nil),                // 32: proto.RoleResultMsg
	(*empty.Empty)(nil),                  // 33: google.protobuf.Empty
}
var file_services_proto_depIdxs = []int32{
	7,  // 0: proto.DefinitionActionMsg.definitionMsg:type_name -> proto.DefinitionMsg
	9,  // 1: proto.LockResultMsg.lockResult:type_name -> proto.LockResult
	11, // 2: proto.DefinitionResultMsg.definitionMsg:type_name -> proto.DefinitionResult
	13, // 3: proto.TaskDetailResultMsg.result:type_name -> proto.ActionResultMsg
	16, // 4: proto.TaskDetailResultMsg.baseData:type_name -> proto.TaskListResultMsg
	17, // 5: proto.TaskDetailResultMsg.resources:type_name -> proto.TaskResourcesMsg
	21, // 6: proto.CreateUserMsg.user:type_name -> proto.UserAccount
	21, // 7: proto.ModifyUserMsg.user:type_name -> proto.UserAccount
	22, // 8: proto.ModifyUserMsg.password:type_name -> proto.ChangePassword
	21, // 9: proto.UserResultMsg.user:type_name -> proto.UserAccount
	21, // 10: proto.UserAccountMsg.user:type_name -> proto.UserAccount
	28, // 11: proto.ListEntityResultMsg.entity:type_name -> proto.EntityMsg
	30, // 12: proto.RoleDefinitionMsg.role:type_name -> proto.RoleMsg
	31, // 13: proto.RoleResultMsg.role:type_name -> proto.RoleDefinitionMsg
	1,  // 14: proto.AuthenticateService.Authenticate:input_type -> proto.AuthorizeActionMsg
	2,  // 15: proto.ResourceService.AddTicket:input_type -> proto.TicketActionMsg
	2,  // 16: proto.ResourceService.DeleteTicket:input_type -> proto.TicketActionMsg
	2,  // 17: proto.ResourceService.CheckTicket:input_type -> proto.TicketActionMsg
	2,  // 18: proto.ResourceService.ListTickets:input_type -> proto.TicketActionMsg
	3,  // 19: proto.ResourceService.SetFlag:input_type -> proto.FlagActionMsg
	3,  // 20: proto.ResourceService.DestroyFlag:input_type -> proto.FlagActionMsg
	3,  // 21: proto.ResourceService.ListFlags:input_type -> proto.FlagActionMsg
	6,  // 22: proto.TaskService.OrderTask:input_type -> proto.TaskOrderMsg
	6,  // 23: proto.TaskService.ForceTask:input_type -> proto.TaskOrderMsg
	4,  // 24: proto.TaskService.RerunTask:input_type -> proto.TaskActionMsg
	4,  // 25: proto.TaskService.HoldTask:input_type -> proto.TaskActionMsg
	4,  // 26: proto.TaskService.FreeTask:input_type -> proto.TaskActionMsg
	4,  // 27: proto.TaskService.SetToOk:input_type -> proto.TaskActionMsg
	4,  // 28: proto.TaskService.ConfirmTask:input_type -> proto.TaskActionMsg
	5,  // 29: proto.TaskService.ListTasks:input_type -> proto.TaskFilterMsg
	4,  // 30: proto.TaskService.TaskDetail:input_type -> proto.TaskActionMsg
	8,  // 31: proto.DefinitionService.GetDefinition:input_type -> proto.DefinitionActionMsg
	8,  // 32: proto.DefinitionService.LockDefinition:input_type -> proto.DefinitionActionMsg
	8,  // 33: proto.DefinitionService.UnlockDefinition:input_type -> proto.DefinitionActionMsg
	0,  // 34: proto.DefinitionService.ListGroups:input_type -> proto.FilterMsg
	8,  // 35: proto.DefinitionService.ListDefinitionsFromGroup:input_type -> proto.DefinitionActionMsg
	23, // 36: proto.AdministrationService.CreateUser:input_type -> proto.CreateUserMsg
	23, // 37: proto.AdministrationService.ModifyUser:input_type -> proto.CreateUserMsg
	26, // 38: proto.AdministrationService.DeleteUser:input_type -> proto.UserMsg
	0,  // 39: proto.AdministrationService.ListUsers:input_type -> proto.FilterMsg
	26, // 40: proto.AdministrationService.GetUser:input_type -> proto.UserMsg
	31, // 41: proto.AdministrationService.CreateRole:input_type -> proto.RoleDefinitionMsg
	31, // 42: proto.AdministrationService.ModifyRole:input_type -> proto.RoleDefinitionMsg
	30, // 43: proto.AdministrationService.DeleteRole:input_type -> proto.RoleMsg
	0,  // 44: proto.AdministrationService.ListRoles:input_type -> proto.FilterMsg
	30, // 45: proto.AdministrationService.GetRole:input_type -> proto.RoleMsg
	33, // 46: proto.StatusService.OverseerStatus:input_type -> google.protobuf.Empty
	13, // 47: proto.AuthenticateService.Authenticate:output_type -> proto.ActionResultMsg
	13, // 48: proto.ResourceService.AddTicket:output_type -> proto.ActionResultMsg
	13, // 49: proto.ResourceService.DeleteTicket:output_type -> proto.ActionResultMsg
	13, // 50: proto.ResourceService.CheckTicket:output_type -> proto.ActionResultMsg
	15, // 51: proto.ResourceService.ListTickets:output_type -> proto.TicketListResultMsg
	13, // 52: proto.ResourceService.SetFlag:output_type -> proto.ActionResultMsg
	13, // 53: proto.ResourceService.DestroyFlag:output_type -> proto.ActionResultMsg
	14, // 54: proto.ResourceService.ListFlags:output_type -> proto.FlagListResultMsg
	13, // 55: proto.TaskService.OrderTask:output_type -> proto.ActionResultMsg
	13, // 56: proto.TaskService.ForceTask:output_type -> proto.ActionResultMsg
	13, // 57: proto.TaskService.RerunTask:output_type -> proto.ActionResultMsg
	13, // 58: proto.TaskService.HoldTask:output_type -> proto.ActionResultMsg
	13, // 59: proto.TaskService.FreeTask:output_type -> proto.ActionResultMsg
	13, // 60: proto.TaskService.SetToOk:output_type -> proto.ActionResultMsg
	13, // 61: proto.TaskService.ConfirmTask:output_type -> proto.ActionResultMsg
	16, // 62: proto.TaskService.ListTasks:output_type -> proto.TaskListResultMsg
	18, // 63: proto.TaskService.TaskDetail:output_type -> proto.TaskDetailResultMsg
	12, // 64: proto.DefinitionService.GetDefinition:output_type -> proto.DefinitionResultMsg
	10, // 65: proto.DefinitionService.LockDefinition:output_type -> proto.LockResultMsg
	10, // 66: proto.DefinitionService.UnlockDefinition:output_type -> proto.LockResultMsg
	19, // 67: proto.DefinitionService.ListGroups:output_type -> proto.DefinitionListGroupResultMsg
	20, // 68: proto.DefinitionService.ListDefinitionsFromGroup:output_type -> proto.DefinitionListResultMsg
	13, // 69: proto.AdministrationService.CreateUser:output_type -> proto.ActionResultMsg
	13, // 70: proto.AdministrationService.ModifyUser:output_type -> proto.ActionResultMsg
	13, // 71: proto.AdministrationService.DeleteUser:output_type -> proto.ActionResultMsg
	29, // 72: proto.AdministrationService.ListUsers:output_type -> proto.ListEntityResultMsg
	25, // 73: proto.AdministrationService.GetUser:output_type -> proto.UserResultMsg
	13, // 74: proto.AdministrationService.CreateRole:output_type -> proto.ActionResultMsg
	13, // 75: proto.AdministrationService.ModifyRole:output_type -> proto.ActionResultMsg
	13, // 76: proto.AdministrationService.DeleteRole:output_type -> proto.ActionResultMsg
	29, // 77: proto.AdministrationService.ListRoles:output_type -> proto.ListEntityResultMsg
	32, // 78: proto.AdministrationService.GetRole:output_type -> proto.RoleResultMsg
	13, // 79: proto.StatusService.OverseerStatus:output_type -> proto.ActionResultMsg
	47, // [47:80] is the sub-list for method output_type
	14, // [14:47] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_services_proto_init() }
func file_services_proto_init() {
	if File_services_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeActionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketActionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagActionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskActionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFilterMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOrderMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionActionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagListResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketListResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskListResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResourcesMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDetailResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionListGroupResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionListResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccountMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntityResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleDefinitionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleResultMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_services_proto_goTypes,
		DependencyIndexes: file_services_proto_depIdxs,
		MessageInfos:      file_services_proto_msgTypes,
	}.Build()
	File_services_proto = out.File
	file_services_proto_rawDesc = nil
	file_services_proto_goTypes = nil
	file_services_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthenticateServiceClient is the client API for AuthenticateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthenticateServiceClient interface {
	Authenticate(ctx context.Context, in *AuthorizeActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
}

type authenticateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticateServiceClient(cc grpc.ClientConnInterface) AuthenticateServiceClient {
	return &authenticateServiceClient{cc}
}

func (c *authenticateServiceClient) Authenticate(ctx context.Context, in *AuthorizeActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.AuthenticateService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticateServiceServer is the server API for AuthenticateService service.
type AuthenticateServiceServer interface {
	Authenticate(context.Context, *AuthorizeActionMsg) (*ActionResultMsg, error)
}

// UnimplementedAuthenticateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthenticateServiceServer struct {
}

func (*UnimplementedAuthenticateServiceServer) Authenticate(context.Context, *AuthorizeActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}

func RegisterAuthenticateServiceServer(s *grpc.Server, srv AuthenticateServiceServer) {
	s.RegisterService(&_AuthenticateService_serviceDesc, srv)
}

func _AuthenticateService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthenticateService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateServiceServer).Authenticate(ctx, req.(*AuthorizeActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthenticateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthenticateService",
	HandlerType: (*AuthenticateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AuthenticateService_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// ResourceServiceClient is the client API for ResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceServiceClient interface {
	AddTicket(ctx context.Context, in *TicketActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	DeleteTicket(ctx context.Context, in *TicketActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	CheckTicket(ctx context.Context, in *TicketActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	ListTickets(ctx context.Context, in *TicketActionMsg, opts ...grpc.CallOption) (ResourceService_ListTicketsClient, error)
	SetFlag(ctx context.Context, in *FlagActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	DestroyFlag(ctx context.Context, in *FlagActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	ListFlags(ctx context.Context, in *FlagActionMsg, opts ...grpc.CallOption) (ResourceService_ListFlagsClient, error)
}

type resourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceServiceClient(cc grpc.ClientConnInterface) ResourceServiceClient {
	return &resourceServiceClient{cc}
}

func (c *resourceServiceClient) AddTicket(ctx context.Context, in *TicketActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.ResourceService/AddTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteTicket(ctx context.Context, in *TicketActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.ResourceService/DeleteTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) CheckTicket(ctx context.Context, in *TicketActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.ResourceService/CheckTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListTickets(ctx context.Context, in *TicketActionMsg, opts ...grpc.CallOption) (ResourceService_ListTicketsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ResourceService_serviceDesc.Streams[0], "/proto.ResourceService/ListTickets", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceServiceListTicketsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourceService_ListTicketsClient interface {
	Recv() (*TicketListResultMsg, error)
	grpc.ClientStream
}

type resourceServiceListTicketsClient struct {
	grpc.ClientStream
}

func (x *resourceServiceListTicketsClient) Recv() (*TicketListResultMsg, error) {
	m := new(TicketListResultMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceServiceClient) SetFlag(ctx context.Context, in *FlagActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.ResourceService/SetFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DestroyFlag(ctx context.Context, in *FlagActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.ResourceService/DestroyFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListFlags(ctx context.Context, in *FlagActionMsg, opts ...grpc.CallOption) (ResourceService_ListFlagsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ResourceService_serviceDesc.Streams[1], "/proto.ResourceService/ListFlags", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceServiceListFlagsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourceService_ListFlagsClient interface {
	Recv() (*FlagListResultMsg, error)
	grpc.ClientStream
}

type resourceServiceListFlagsClient struct {
	grpc.ClientStream
}

func (x *resourceServiceListFlagsClient) Recv() (*FlagListResultMsg, error) {
	m := new(FlagListResultMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResourceServiceServer is the server API for ResourceService service.
type ResourceServiceServer interface {
	AddTicket(context.Context, *TicketActionMsg) (*ActionResultMsg, error)
	DeleteTicket(context.Context, *TicketActionMsg) (*ActionResultMsg, error)
	CheckTicket(context.Context, *TicketActionMsg) (*ActionResultMsg, error)
	ListTickets(*TicketActionMsg, ResourceService_ListTicketsServer) error
	SetFlag(context.Context, *FlagActionMsg) (*ActionResultMsg, error)
	DestroyFlag(context.Context, *FlagActionMsg) (*ActionResultMsg, error)
	ListFlags(*FlagActionMsg, ResourceService_ListFlagsServer) error
}

// UnimplementedResourceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedResourceServiceServer struct {
}

func (*UnimplementedResourceServiceServer) AddTicket(context.Context, *TicketActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTicket not implemented")
}
func (*UnimplementedResourceServiceServer) DeleteTicket(context.Context, *TicketActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (*UnimplementedResourceServiceServer) CheckTicket(context.Context, *TicketActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTicket not implemented")
}
func (*UnimplementedResourceServiceServer) ListTickets(*TicketActionMsg, ResourceService_ListTicketsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTickets not implemented")
}
func (*UnimplementedResourceServiceServer) SetFlag(context.Context, *FlagActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFlag not implemented")
}
func (*UnimplementedResourceServiceServer) DestroyFlag(context.Context, *FlagActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyFlag not implemented")
}
func (*UnimplementedResourceServiceServer) ListFlags(*FlagActionMsg, ResourceService_ListFlagsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFlags not implemented")
}

func RegisterResourceServiceServer(s *grpc.Server, srv ResourceServiceServer) {
	s.RegisterService(&_ResourceService_serviceDesc, srv)
}

func _ResourceService_AddTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).AddTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ResourceService/AddTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).AddTicket(ctx, req.(*TicketActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ResourceService/DeleteTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteTicket(ctx, req.(*TicketActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_CheckTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CheckTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ResourceService/CheckTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CheckTicket(ctx, req.(*TicketActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListTickets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TicketActionMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).ListTickets(m, &resourceServiceListTicketsServer{stream})
}

type ResourceService_ListTicketsServer interface {
	Send(*TicketListResultMsg) error
	grpc.ServerStream
}

type resourceServiceListTicketsServer struct {
	grpc.ServerStream
}

func (x *resourceServiceListTicketsServer) Send(m *TicketListResultMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _ResourceService_SetFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).SetFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ResourceService/SetFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).SetFlag(ctx, req.(*FlagActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DestroyFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DestroyFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ResourceService/DestroyFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DestroyFlag(ctx, req.(*FlagActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListFlags_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FlagActionMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).ListFlags(m, &resourceServiceListFlagsServer{stream})
}

type ResourceService_ListFlagsServer interface {
	Send(*FlagListResultMsg) error
	grpc.ServerStream
}

type resourceServiceListFlagsServer struct {
	grpc.ServerStream
}

func (x *resourceServiceListFlagsServer) Send(m *FlagListResultMsg) error {
	return x.ServerStream.SendMsg(m)
}

var _ResourceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ResourceService",
	HandlerType: (*ResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTicket",
			Handler:    _ResourceService_AddTicket_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _ResourceService_DeleteTicket_Handler,
		},
		{
			MethodName: "CheckTicket",
			Handler:    _ResourceService_CheckTicket_Handler,
		},
		{
			MethodName: "SetFlag",
			Handler:    _ResourceService_SetFlag_Handler,
		},
		{
			MethodName: "DestroyFlag",
			Handler:    _ResourceService_DestroyFlag_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTickets",
			Handler:       _ResourceService_ListTickets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListFlags",
			Handler:       _ResourceService_ListFlags_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services.proto",
}

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskServiceClient interface {
	OrderTask(ctx context.Context, in *TaskOrderMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	ForceTask(ctx context.Context, in *TaskOrderMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	RerunTask(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	HoldTask(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	FreeTask(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	SetToOk(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	ConfirmTask(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	ListTasks(ctx context.Context, in *TaskFilterMsg, opts ...grpc.CallOption) (TaskService_ListTasksClient, error)
	TaskDetail(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*TaskDetailResultMsg, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) OrderTask(ctx context.Context, in *TaskOrderMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.TaskService/OrderTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ForceTask(ctx context.Context, in *TaskOrderMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.TaskService/ForceTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RerunTask(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.TaskService/RerunTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) HoldTask(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.TaskService/HoldTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FreeTask(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.TaskService/FreeTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) SetToOk(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.TaskService/SetToOk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ConfirmTask(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.TaskService/ConfirmTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTasks(ctx context.Context, in *TaskFilterMsg, opts ...grpc.CallOption) (TaskService_ListTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TaskService_serviceDesc.Streams[0], "/proto.TaskService/ListTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskServiceListTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskService_ListTasksClient interface {
	Recv() (*TaskListResultMsg, error)
	grpc.ClientStream
}

type taskServiceListTasksClient struct {
	grpc.ClientStream
}

func (x *taskServiceListTasksClient) Recv() (*TaskListResultMsg, error) {
	m := new(TaskListResultMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskServiceClient) TaskDetail(ctx context.Context, in *TaskActionMsg, opts ...grpc.CallOption) (*TaskDetailResultMsg, error) {
	out := new(TaskDetailResultMsg)
	err := c.cc.Invoke(ctx, "/proto.TaskService/TaskDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
type TaskServiceServer interface {
	OrderTask(context.Context, *TaskOrderMsg) (*ActionResultMsg, error)
	ForceTask(context.Context, *TaskOrderMsg) (*ActionResultMsg, error)
	RerunTask(context.Context, *TaskActionMsg) (*ActionResultMsg, error)
	HoldTask(context.Context, *TaskActionMsg) (*ActionResultMsg, error)
	FreeTask(context.Context, *TaskActionMsg) (*ActionResultMsg, error)
	SetToOk(context.Context, *TaskActionMsg) (*ActionResultMsg, error)
	ConfirmTask(context.Context, *TaskActionMsg) (*ActionResultMsg, error)
	ListTasks(*TaskFilterMsg, TaskService_ListTasksServer) error
	TaskDetail(context.Context, *TaskActionMsg) (*TaskDetailResultMsg, error)
}

// UnimplementedTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (*UnimplementedTaskServiceServer) OrderTask(context.Context, *TaskOrderMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderTask not implemented")
}
func (*UnimplementedTaskServiceServer) ForceTask(context.Context, *TaskOrderMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceTask not implemented")
}
func (*UnimplementedTaskServiceServer) RerunTask(context.Context, *TaskActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RerunTask not implemented")
}
func (*UnimplementedTaskServiceServer) HoldTask(context.Context, *TaskActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HoldTask not implemented")
}
func (*UnimplementedTaskServiceServer) FreeTask(context.Context, *TaskActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreeTask not implemented")
}
func (*UnimplementedTaskServiceServer) SetToOk(context.Context, *TaskActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetToOk not implemented")
}
func (*UnimplementedTaskServiceServer) ConfirmTask(context.Context, *TaskActionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTask not implemented")
}
func (*UnimplementedTaskServiceServer) ListTasks(*TaskFilterMsg, TaskService_ListTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (*UnimplementedTaskServiceServer) TaskDetail(context.Context, *TaskActionMsg) (*TaskDetailResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskDetail not implemented")
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_OrderTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskOrderMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).OrderTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/OrderTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).OrderTask(ctx, req.(*TaskOrderMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ForceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskOrderMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ForceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/ForceTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ForceTask(ctx, req.(*TaskOrderMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RerunTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RerunTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/RerunTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RerunTask(ctx, req.(*TaskActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_HoldTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).HoldTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/HoldTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).HoldTask(ctx, req.(*TaskActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FreeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FreeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/FreeTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FreeTask(ctx, req.(*TaskActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_SetToOk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SetToOk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/SetToOk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SetToOk(ctx, req.(*TaskActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ConfirmTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ConfirmTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/ConfirmTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ConfirmTask(ctx, req.(*TaskActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskFilterMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskServiceServer).ListTasks(m, &taskServiceListTasksServer{stream})
}

type TaskService_ListTasksServer interface {
	Send(*TaskListResultMsg) error
	grpc.ServerStream
}

type taskServiceListTasksServer struct {
	grpc.ServerStream
}

func (x *taskServiceListTasksServer) Send(m *TaskListResultMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _TaskService_TaskDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).TaskDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/TaskDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).TaskDetail(ctx, req.(*TaskActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderTask",
			Handler:    _TaskService_OrderTask_Handler,
		},
		{
			MethodName: "ForceTask",
			Handler:    _TaskService_ForceTask_Handler,
		},
		{
			MethodName: "RerunTask",
			Handler:    _TaskService_RerunTask_Handler,
		},
		{
			MethodName: "HoldTask",
			Handler:    _TaskService_HoldTask_Handler,
		},
		{
			MethodName: "FreeTask",
			Handler:    _TaskService_FreeTask_Handler,
		},
		{
			MethodName: "SetToOk",
			Handler:    _TaskService_SetToOk_Handler,
		},
		{
			MethodName: "ConfirmTask",
			Handler:    _TaskService_ConfirmTask_Handler,
		},
		{
			MethodName: "TaskDetail",
			Handler:    _TaskService_TaskDetail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTasks",
			Handler:       _TaskService_ListTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services.proto",
}

// DefinitionServiceClient is the client API for DefinitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DefinitionServiceClient interface {
	GetDefinition(ctx context.Context, in *DefinitionActionMsg, opts ...grpc.CallOption) (*DefinitionResultMsg, error)
	LockDefinition(ctx context.Context, in *DefinitionActionMsg, opts ...grpc.CallOption) (*LockResultMsg, error)
	UnlockDefinition(ctx context.Context, in *DefinitionActionMsg, opts ...grpc.CallOption) (*LockResultMsg, error)
	ListGroups(ctx context.Context, in *FilterMsg, opts ...grpc.CallOption) (DefinitionService_ListGroupsClient, error)
	ListDefinitionsFromGroup(ctx context.Context, in *DefinitionActionMsg, opts ...grpc.CallOption) (DefinitionService_ListDefinitionsFromGroupClient, error)
}

type definitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDefinitionServiceClient(cc grpc.ClientConnInterface) DefinitionServiceClient {
	return &definitionServiceClient{cc}
}

func (c *definitionServiceClient) GetDefinition(ctx context.Context, in *DefinitionActionMsg, opts ...grpc.CallOption) (*DefinitionResultMsg, error) {
	out := new(DefinitionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.DefinitionService/GetDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *definitionServiceClient) LockDefinition(ctx context.Context, in *DefinitionActionMsg, opts ...grpc.CallOption) (*LockResultMsg, error) {
	out := new(LockResultMsg)
	err := c.cc.Invoke(ctx, "/proto.DefinitionService/LockDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *definitionServiceClient) UnlockDefinition(ctx context.Context, in *DefinitionActionMsg, opts ...grpc.CallOption) (*LockResultMsg, error) {
	out := new(LockResultMsg)
	err := c.cc.Invoke(ctx, "/proto.DefinitionService/UnlockDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *definitionServiceClient) ListGroups(ctx context.Context, in *FilterMsg, opts ...grpc.CallOption) (DefinitionService_ListGroupsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DefinitionService_serviceDesc.Streams[0], "/proto.DefinitionService/ListGroups", opts...)
	if err != nil {
		return nil, err
	}
	x := &definitionServiceListGroupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DefinitionService_ListGroupsClient interface {
	Recv() (*DefinitionListGroupResultMsg, error)
	grpc.ClientStream
}

type definitionServiceListGroupsClient struct {
	grpc.ClientStream
}

func (x *definitionServiceListGroupsClient) Recv() (*DefinitionListGroupResultMsg, error) {
	m := new(DefinitionListGroupResultMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *definitionServiceClient) ListDefinitionsFromGroup(ctx context.Context, in *DefinitionActionMsg, opts ...grpc.CallOption) (DefinitionService_ListDefinitionsFromGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DefinitionService_serviceDesc.Streams[1], "/proto.DefinitionService/ListDefinitionsFromGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &definitionServiceListDefinitionsFromGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DefinitionService_ListDefinitionsFromGroupClient interface {
	Recv() (*DefinitionListResultMsg, error)
	grpc.ClientStream
}

type definitionServiceListDefinitionsFromGroupClient struct {
	grpc.ClientStream
}

func (x *definitionServiceListDefinitionsFromGroupClient) Recv() (*DefinitionListResultMsg, error) {
	m := new(DefinitionListResultMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DefinitionServiceServer is the server API for DefinitionService service.
type DefinitionServiceServer interface {
	GetDefinition(context.Context, *DefinitionActionMsg) (*DefinitionResultMsg, error)
	LockDefinition(context.Context, *DefinitionActionMsg) (*LockResultMsg, error)
	UnlockDefinition(context.Context, *DefinitionActionMsg) (*LockResultMsg, error)
	ListGroups(*FilterMsg, DefinitionService_ListGroupsServer) error
	ListDefinitionsFromGroup(*DefinitionActionMsg, DefinitionService_ListDefinitionsFromGroupServer) error
}

// UnimplementedDefinitionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDefinitionServiceServer struct {
}

func (*UnimplementedDefinitionServiceServer) GetDefinition(context.Context, *DefinitionActionMsg) (*DefinitionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefinition not implemented")
}
func (*UnimplementedDefinitionServiceServer) LockDefinition(context.Context, *DefinitionActionMsg) (*LockResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockDefinition not implemented")
}
func (*UnimplementedDefinitionServiceServer) UnlockDefinition(context.Context, *DefinitionActionMsg) (*LockResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockDefinition not implemented")
}
func (*UnimplementedDefinitionServiceServer) ListGroups(*FilterMsg, DefinitionService_ListGroupsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (*UnimplementedDefinitionServiceServer) ListDefinitionsFromGroup(*DefinitionActionMsg, DefinitionService_ListDefinitionsFromGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDefinitionsFromGroup not implemented")
}

func RegisterDefinitionServiceServer(s *grpc.Server, srv DefinitionServiceServer) {
	s.RegisterService(&_DefinitionService_serviceDesc, srv)
}

func _DefinitionService_GetDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefinitionActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefinitionServiceServer).GetDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DefinitionService/GetDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefinitionServiceServer).GetDefinition(ctx, req.(*DefinitionActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefinitionService_LockDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefinitionActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefinitionServiceServer).LockDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DefinitionService/LockDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefinitionServiceServer).LockDefinition(ctx, req.(*DefinitionActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefinitionService_UnlockDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefinitionActionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefinitionServiceServer).UnlockDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DefinitionService/UnlockDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefinitionServiceServer).UnlockDefinition(ctx, req.(*DefinitionActionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefinitionService_ListGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilterMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DefinitionServiceServer).ListGroups(m, &definitionServiceListGroupsServer{stream})
}

type DefinitionService_ListGroupsServer interface {
	Send(*DefinitionListGroupResultMsg) error
	grpc.ServerStream
}

type definitionServiceListGroupsServer struct {
	grpc.ServerStream
}

func (x *definitionServiceListGroupsServer) Send(m *DefinitionListGroupResultMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _DefinitionService_ListDefinitionsFromGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DefinitionActionMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DefinitionServiceServer).ListDefinitionsFromGroup(m, &definitionServiceListDefinitionsFromGroupServer{stream})
}

type DefinitionService_ListDefinitionsFromGroupServer interface {
	Send(*DefinitionListResultMsg) error
	grpc.ServerStream
}

type definitionServiceListDefinitionsFromGroupServer struct {
	grpc.ServerStream
}

func (x *definitionServiceListDefinitionsFromGroupServer) Send(m *DefinitionListResultMsg) error {
	return x.ServerStream.SendMsg(m)
}

var _DefinitionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DefinitionService",
	HandlerType: (*DefinitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefinition",
			Handler:    _DefinitionService_GetDefinition_Handler,
		},
		{
			MethodName: "LockDefinition",
			Handler:    _DefinitionService_LockDefinition_Handler,
		},
		{
			MethodName: "UnlockDefinition",
			Handler:    _DefinitionService_UnlockDefinition_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListGroups",
			Handler:       _DefinitionService_ListGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListDefinitionsFromGroup",
			Handler:       _DefinitionService_ListDefinitionsFromGroup_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services.proto",
}

// AdministrationServiceClient is the client API for AdministrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdministrationServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	ModifyUser(ctx context.Context, in *CreateUserMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	DeleteUser(ctx context.Context, in *UserMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	ListUsers(ctx context.Context, in *FilterMsg, opts ...grpc.CallOption) (*ListEntityResultMsg, error)
	GetUser(ctx context.Context, in *UserMsg, opts ...grpc.CallOption) (*UserResultMsg, error)
	CreateRole(ctx context.Context, in *RoleDefinitionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	ModifyRole(ctx context.Context, in *RoleDefinitionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	DeleteRole(ctx context.Context, in *RoleMsg, opts ...grpc.CallOption) (*ActionResultMsg, error)
	ListRoles(ctx context.Context, in *FilterMsg, opts ...grpc.CallOption) (*ListEntityResultMsg, error)
	GetRole(ctx context.Context, in *RoleMsg, opts ...grpc.CallOption) (*RoleResultMsg, error)
}

type administrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdministrationServiceClient(cc grpc.ClientConnInterface) AdministrationServiceClient {
	return &administrationServiceClient{cc}
}

func (c *administrationServiceClient) CreateUser(ctx context.Context, in *CreateUserMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.AdministrationService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationServiceClient) ModifyUser(ctx context.Context, in *CreateUserMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.AdministrationService/ModifyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationServiceClient) DeleteUser(ctx context.Context, in *UserMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.AdministrationService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationServiceClient) ListUsers(ctx context.Context, in *FilterMsg, opts ...grpc.CallOption) (*ListEntityResultMsg, error) {
	out := new(ListEntityResultMsg)
	err := c.cc.Invoke(ctx, "/proto.AdministrationService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationServiceClient) GetUser(ctx context.Context, in *UserMsg, opts ...grpc.CallOption) (*UserResultMsg, error) {
	out := new(UserResultMsg)
	err := c.cc.Invoke(ctx, "/proto.AdministrationService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationServiceClient) CreateRole(ctx context.Context, in *RoleDefinitionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.AdministrationService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationServiceClient) ModifyRole(ctx context.Context, in *RoleDefinitionMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.AdministrationService/ModifyRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationServiceClient) DeleteRole(ctx context.Context, in *RoleMsg, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.AdministrationService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationServiceClient) ListRoles(ctx context.Context, in *FilterMsg, opts ...grpc.CallOption) (*ListEntityResultMsg, error) {
	out := new(ListEntityResultMsg)
	err := c.cc.Invoke(ctx, "/proto.AdministrationService/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationServiceClient) GetRole(ctx context.Context, in *RoleMsg, opts ...grpc.CallOption) (*RoleResultMsg, error) {
	out := new(RoleResultMsg)
	err := c.cc.Invoke(ctx, "/proto.AdministrationService/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdministrationServiceServer is the server API for AdministrationService service.
type AdministrationServiceServer interface {
	CreateUser(context.Context, *CreateUserMsg) (*ActionResultMsg, error)
	ModifyUser(context.Context, *CreateUserMsg) (*ActionResultMsg, error)
	DeleteUser(context.Context, *UserMsg) (*ActionResultMsg, error)
	ListUsers(context.Context, *FilterMsg) (*ListEntityResultMsg, error)
	GetUser(context.Context, *UserMsg) (*UserResultMsg, error)
	CreateRole(context.Context, *RoleDefinitionMsg) (*ActionResultMsg, error)
	ModifyRole(context.Context, *RoleDefinitionMsg) (*ActionResultMsg, error)
	DeleteRole(context.Context, *RoleMsg) (*ActionResultMsg, error)
	ListRoles(context.Context, *FilterMsg) (*ListEntityResultMsg, error)
	GetRole(context.Context, *RoleMsg) (*RoleResultMsg, error)
}

// UnimplementedAdministrationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAdministrationServiceServer struct {
}

func (*UnimplementedAdministrationServiceServer) CreateUser(context.Context, *CreateUserMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedAdministrationServiceServer) ModifyUser(context.Context, *CreateUserMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyUser not implemented")
}
func (*UnimplementedAdministrationServiceServer) DeleteUser(context.Context, *UserMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedAdministrationServiceServer) ListUsers(context.Context, *FilterMsg) (*ListEntityResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedAdministrationServiceServer) GetUser(context.Context, *UserMsg) (*UserResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedAdministrationServiceServer) CreateRole(context.Context, *RoleDefinitionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (*UnimplementedAdministrationServiceServer) ModifyRole(context.Context, *RoleDefinitionMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyRole not implemented")
}
func (*UnimplementedAdministrationServiceServer) DeleteRole(context.Context, *RoleMsg) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedAdministrationServiceServer) ListRoles(context.Context, *FilterMsg) (*ListEntityResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (*UnimplementedAdministrationServiceServer) GetRole(context.Context, *RoleMsg) (*RoleResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}

func RegisterAdministrationServiceServer(s *grpc.Server, srv AdministrationServiceServer) {
	s.RegisterService(&_AdministrationService_serviceDesc, srv)
}

func _AdministrationService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdministrationService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServiceServer).CreateUser(ctx, req.(*CreateUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrationService_ModifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServiceServer).ModifyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdministrationService/ModifyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServiceServer).ModifyUser(ctx, req.(*CreateUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrationService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdministrationService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServiceServer).DeleteUser(ctx, req.(*UserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrationService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdministrationService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServiceServer).ListUsers(ctx, req.(*FilterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrationService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdministrationService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServiceServer).GetUser(ctx, req.(*UserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrationService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDefinitionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdministrationService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServiceServer).CreateRole(ctx, req.(*RoleDefinitionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrationService_ModifyRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDefinitionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServiceServer).ModifyRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdministrationService/ModifyRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServiceServer).ModifyRole(ctx, req.(*RoleDefinitionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrationService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdministrationService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServiceServer).DeleteRole(ctx, req.(*RoleMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrationService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdministrationService/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServiceServer).ListRoles(ctx, req.(*FilterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrationService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdministrationService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServiceServer).GetRole(ctx, req.(*RoleMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdministrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AdministrationService",
	HandlerType: (*AdministrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _AdministrationService_CreateUser_Handler,
		},
		{
			MethodName: "ModifyUser",
			Handler:    _AdministrationService_ModifyUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AdministrationService_DeleteUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _AdministrationService_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AdministrationService_GetUser_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _AdministrationService_CreateRole_Handler,
		},
		{
			MethodName: "ModifyRole",
			Handler:    _AdministrationService_ModifyRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _AdministrationService_DeleteRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _AdministrationService_ListRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _AdministrationService_GetRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// StatusServiceClient is the client API for StatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatusServiceClient interface {
	OverseerStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ActionResultMsg, error)
}

type statusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusServiceClient(cc grpc.ClientConnInterface) StatusServiceClient {
	return &statusServiceClient{cc}
}

func (c *statusServiceClient) OverseerStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ActionResultMsg, error) {
	out := new(ActionResultMsg)
	err := c.cc.Invoke(ctx, "/proto.StatusService/OverseerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServiceServer is the server API for StatusService service.
type StatusServiceServer interface {
	OverseerStatus(context.Context, *empty.Empty) (*ActionResultMsg, error)
}

// UnimplementedStatusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStatusServiceServer struct {
}

func (*UnimplementedStatusServiceServer) OverseerStatus(context.Context, *empty.Empty) (*ActionResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverseerStatus not implemented")
}

func RegisterStatusServiceServer(s *grpc.Server, srv StatusServiceServer) {
	s.RegisterService(&_StatusService_serviceDesc, srv)
}

func _StatusService_OverseerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).OverseerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StatusService/OverseerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).OverseerStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StatusService",
	HandlerType: (*StatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OverseerStatus",
			Handler:    _StatusService_OverseerStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
