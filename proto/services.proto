syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "openapiv2/options/annotations.proto";

package proto;
option go_package = "proto/services";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Overseer API Gateway";
		version: "1.0";
	};

    schemes: HTTP;
    schemes: HTTPS;
    consumes: "application/json";

    security_definitions: {
        security: {
            key: "ApiKeyAuth";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "Authorization";
            }
        }
    }

    security: {
		security_requirement: {
			key: "ApiKeyAuth";
			value: {};
		}
	}

    responses :{
        key: "401"
        value: {
            description :"An unauthenticated user"
            examples: {
                key: "application/json"
                value: '{"error":  "user not authenticated"}'
            }
            schema:{
                json_schema:{
                    title : "service error response"
                    ref : ".proto.ErrorResponse"
                }
            }    
        }
    }
    responses :{
        key: "403"
        value: {
            description :"An unauthorized access"
            examples: {
                key: "application/json"
                value: '{"error":  "user not authorized to perform this action"}'
            }
            schema:{
                json_schema:{
                    title : "service error response"
                    ref : ".proto.ErrorResponse"
                }
            }    
        }
    }
};

message ErrorResponse{
    string error = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		title: "message",
		description: "Response message"
	}];
}

service AuthenticateService{
    rpc Authenticate(AuthorizeActionMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            post : "/api/authorize"
            body : "*"
        };
    }
}

service ResourceService {

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
        description : "Resource Service"
    };

    rpc AddTicket(TicketActionMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            put : "/api/resources/ticket"
            body : "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Adds a ticket to the resource pool"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }

    rpc DeleteTicket(TicketActionMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            delete : "/api/resources/ticket/{name}/{odate}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Deletes a ticket from the resource pool"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    rpc CheckTicket(TicketActionMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            get : "/api/resources/ticket/{name}/{odate}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Checks if given ticket exists"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    //Should be deprecated new endpoint list resources
    rpc ListTickets(TicketActionMsg) returns (stream TicketListResultMsg){
        option (google.api.http) = {
            post : "/api/resources/tickets"
            body : "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Returns a list of tickets"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    rpc SetFlag(FlagActionMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            put : "/api/resources/flag"
            body : "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Sets a flag in a given state"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    rpc DestroyFlag(FlagActionMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            delete : "/api/resources/flag/{name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Destroys a flag"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    //Should be deprecated new endpoint list resources
    rpc ListFlags(FlagActionMsg) returns (stream FlagListResultMsg){
        option (google.api.http) = {
            post : "/api/resources/flags"
            body : "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Lists flags"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    rpc ListResources(ListResourcesMsg) returns (ListResourcesResultMsg){
        option (google.api.http) = {
            post : "/api/resources"
            body : "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Returns a list of resources"
        };
    }
}
service TaskService{
    
    rpc OrderTask(TaskOrderMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            put : "/api/task/order"
            body : "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Orders a new task, Checks if all preconditions are met"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    rpc ForceTask(TaskOrderMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            put : "/api/task/force"
            body : "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Forcefully orders a new task, without checking preconditions"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    rpc OrderGroup(TaskOrderGroupMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            put : "/api/group/order"
            body : "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Orders an entire group, checks if all preconditions are met"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    rpc ForceGroup(TaskOrderGroupMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            put : "/api/group/force"
            body : "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Forcefully orders an entire group, without checking preconditions"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    rpc EnforceTask(TaskActionMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            put : "/api/task/{taskID}/enforce"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Forcibly executes a task"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
            responses :{
                key: "404"
				value: {
                    description :"The task with a given id was not found"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    rpc RerunTask(TaskActionMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            put : "/api/task/{taskID}/rerun"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Reruns a task"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
            responses :{
                key: "404"
				value: {
                    description :"The task with a given id was not found"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    rpc HoldTask(TaskActionMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            put : "/api/task/{taskID}/hold"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Holds execution of a given task"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
            responses :{
                key: "404"
				value: {
                    description :"The task with a given id was not found"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    rpc FreeTask(TaskActionMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            put : "/api/task/{taskID}/free"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Frees a given task"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
            responses :{
                key: "404"
				value: {
                    description :"The task with a given id was not found"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    rpc SetToOk(TaskActionMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            put : "/api/task/{taskID}/setok"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Forcibly changes a task's status to ok"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
            responses :{
                key: "404"
				value: {
                    description :"The task with a given id was not found"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    rpc ConfirmTask(TaskActionMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            put : "/api/task/{taskID}/confirm"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Confirms a task"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
            responses :{
                key: "404"
				value: {
                    description :"The task with a given id was not found"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    rpc ListTasks(TaskFilterMsg) returns (stream TaskListResultMsg){
        option (google.api.http) = {
            post : "/api/task/tasks"
            body : "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Returns a list of active tasks"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    rpc TaskDetail(TaskActionMsg) returns (TaskDetailResultMsg){
        option (google.api.http) = {
            get : "/api/task/{taskID}/details"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Returns detailed information about a given task"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
            responses :{
                key: "404"
				value: {
                    description :"The task with a given id was not found"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
    rpc TaskOutput(TaskActionMsg) returns (TaskDataMsg){
        option (google.api.http) = {
            get : "/api/task/{taskID}/output"
        };
    }
    rpc TaskLog(TaskActionMsg) returns (TaskDataMsg){
        option (google.api.http) = {
            get : "/api/task/{taskID}/log"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description : "Returns a history of a given task"
            responses :{
                key: "400"
				value: {
                    description :"Processing request error"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
            responses :{
                key: "404"
				value: {
                    description :"The task with a given id was not found"
					examples: {
						key: "application/json"
						value: '{"error":  "error message"}'
					}
                    schema:{
                        json_schema:{
                            title : "service error response"
                            ref : ".proto.ErrorResponse"
                        }
                    }    
				}
			}
        };
    }
}

service DefinitionService{

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
        description : "Definition Service"
    };

    rpc GetDefinition(DefinitionActionMsg) returns (DefinitionResultMsg){
        option (google.api.http) = {
            post : "/api/def/definition"
            body : "definitionMsg"
        };
    }
    rpc ListGroups(FilterMsg) returns (DefinitionListGroupResultMsg){
        option (google.api.http) = {
            get : "/api/def/groups/{filter}"
        };
    }
    rpc ListDefinitionsFromGroup(GroupNameMsg) returns (DefinitionListResultMsg){
        option (google.api.http) = {
            get : "/api/def/{groupName}/definitions"
        };
    }
}

service AdministrationService{
    rpc CreateUser(CreateUserMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            put : "/api/admin/user"
            body : "*"
        };
    }
    rpc ModifyUser(ModifyUserMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            post : "/api/admin/user"
            body : "*"
        };
    }
    rpc DeleteUser(UserMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            delete : "/api/admin/user/{username}"
        };
    }
    rpc ListUsers(FilterMsg)  returns (ListUsersMsg){
        option (google.api.http) = {
            get : "/api/admin/users"
        };
    }
    rpc GetUser(UserMsg) returns (UserInfoMsg){
        option (google.api.http) = {
            get : "/api/admin/user/{username}"
        };
    }

    rpc CreateRole(RoleDefinitionMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            put : "/api/admin/role"
            body : "*"
        };
    }
    rpc ModifyRole(RoleDefinitionMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            post : "/api/admin/role"
            body : "*"
        };
    }
    rpc DeleteRole(RoleMsg) returns (ActionResultMsg){
        option (google.api.http) = {
            delete : "/api/admin/role/{rolename}"
        };
    }
    rpc ListRoles(FilterMsg)  returns (ListRolesMsg){
        option (google.api.http) = {
            get : "/api/admin/roles"
        };
    }
    rpc GetRole(RoleMsg) returns (RoleResultMsg){
        option (google.api.http) = {
            get : "/api/admin/role/{rolename}"
        };
    }
    rpc Quiesce(google.protobuf.Empty) returns (ActionResultMsg){}
    rpc Resume(google.protobuf.Empty) returns (ActionResultMsg){}
}

service StatusService {
    rpc OverseerStatus(google.protobuf.Empty) returns (ActionResultMsg){}
}

message GroupNameMsg{
    string groupName = 1;
}

message FilterMsg{
    string filter = 1;
}

message AuthorizeActionMsg{
    string username = 1;
    string password = 2;
}

message TicketActionMsg {
    string name = 1;
    string odate = 2;
}
message FlagActionMsg {
    string name = 1;
    int32 state = 2;
}

message TaskActionMsg{
    string taskID = 1; 
}

message TaskFilterMsg{
    string group = 1;
    string name = 2;
    string taskID = 3;
    string odateFrom = 4;
    string odateTo = 5;
    uint32 status = 6;

}

message TaskOrderMsg{
    string taskGroup = 1;
    string taskName = 2;
    string odate = 3;   
}

message TaskOrderGroupMsg{
    string taskGroup = 1;
    string odate = 2;   
}

message DefinitionMsg{
    string groupName = 1;
    string taskName = 2;
}
message DefinitionActionMsg{
    DefinitionMsg definitionMsg = 1;
}
message DefinitionDetails{
    bool success = 1;
    string message  = 2;   
}
message DefinitionResultMsg{
    DefinitionDetails definitionMsg = 1;
}

message ActionResultMsg{
    bool success = 1;
    string message = 2; 
}

//DEPRECATED
message FlagListResultMsg{
    string flagName = 1;
    int32 state = 2;    
}
//DEPRECATED
message TicketListResultMsg{
    string name = 1;
    string odate = 2;    
}
message TaskListResultMsg{
    string groupName = 1;
    string taskName = 2;
    string taskId = 3;
    string orderDate = 4;
    int32 taskStatus = 5;
    int32 runNumber = 6;
    string waiting = 7;
    bool   held = 8;
    bool   confirmed = 9;
}
message TaskResourcesMsg {
    string type =  1;
    string name  = 2;
    string odate = 3;
    bool satisfied = 5;

}

message TaskCyclicResultMsg{
    bool isCyclic = 1;
	string nextRun = 2;
	string runFrom = 3;
	int32 maxRun = 4;
	int32 interval = 5;
}

message TaskDetailResultMsg{
    ActionResultMsg    result = 1;
    TaskListResultMsg  baseData = 2;
    string description = 3;
    string from = 4;
    string to = 5;
    string startTime  = 6;
    string endTime = 7;
    string worker = 8;
    repeated TaskResourcesMsg resources = 9;
    TaskCyclicResultMsg cyclicData = 10;
    
}
message TaskDataMsg{
    repeated string output = 1;
}

message DefinitionListGroupResultMsg{
    repeated string groupName = 1;
}
message DefinitionListMsg{
    string groupName = 1;
    string taskName = 2;
    string description = 3;
}
message DefinitionListResultMsg{
    repeated DefinitionListMsg definitions = 1;
}

message ChangePassword{
    string oldPassword = 1;
    string newPassword = 2;
}

message UserMsg{
    string username = 1;
}

message UserInfoMsg{
    string username = 1;
    string fullname = 2;
    string email    = 3;
    bool   enabled  = 4;
    repeated string roles = 6;
}

message ListUsersMsg {
    repeated UserInfoMsg users = 1;
}

message CreateUserMsg {
    UserInfoMsg user = 1;
    string password = 2;
}

message ModifyUserMsg{
    UserInfoMsg user = 1;
}

message RoleInfoMsg {
    string name  = 1;
    string description = 2;
}

message ListRolesMsg{
    repeated RoleInfoMsg roles = 1;
}

message RoleMsg{
    string rolename = 1;
}

message RoleDefinitionMsg{
    RoleMsg role = 1;
    string description = 2;
    bool administration = 3;
    bool restart = 4;
    bool setToOk = 5;
    bool addTicket = 6;
    bool removeTicket = 7;
    bool setFlag = 8;
    bool confirm = 9;
    bool order = 10;
    bool force = 11;
    bool definition = 12;
    bool hold = 13;
    bool free = 14;
    bool bypass = 15;
}

message RoleResultMsg{
    RoleDefinitionMsg role  = 1;
}

message ResourceMsg{
    string name  = 1;
    string resourceType = 2;
    oneof properties {
        string orderDate = 4;
        FlagProperties flag = 5;
    }
}

message FlagProperties{
    string state = 1;
    uint32 count = 2;
}

message ListResourcesMsg{
    string name = 1;
    string resourceType = 2; 
    map<string,string> properties = 3;
}

message ListResourcesResultMsg{
   repeated ResourceMsg resources = 1;
}