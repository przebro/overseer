syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

package proto;
option go_package = "proto/wservices";

service TaskExecutionService{
	rpc StartTask(StartTaskMsg) returns (TaskExecutionResponseMsg){}
	rpc TerminateTask(TaskIdMsg) returns (WorkerActionMsg){}
	rpc CompleteTask(TaskIdMsg) returns (WorkerActionMsg){}
	rpc TaskStatus(TaskIdMsg) returns (TaskExecutionResponseMsg) {}
	rpc TaskOutput(TaskIdMsg) returns (stream TaskOutputMsg) {}
	rpc WorkerStatus(google.protobuf.Empty) returns(WorkerStatusResponseMsg){}
}

message TaskIdMsg{
	string taskID = 1;
	string ExecutionID = 2;
}

message StartTaskMsg{
    TaskIdMsg taskID  = 1;
    string type = 2;
    map<string,string> variables = 4;
	google.protobuf.Any Command = 5;
}

message TaskExecutionResponseMsg{
	enum TaskStatus{
		RECEIVED = 0;
		EXECUTING = 1;
		ENDED = 2;
		FAILED = 3;
		//reserved for future use
		WAITING = 4;
		//reserved for future use
		IDLE = 5;
		STARTING = 6;
	}
	TaskStatus status = 1;
	//Code returned from executed program,
	//For dummy worker it is always set to 0
	//For os type, it contains return code of an executed command
	//For AWS Lambda it contains response code, usually 200 which means that lambda function was started successfully,
	//even if later execution was unsuccessful
	int32 returnCode  = 2;
	//This field contains a subjective status of a task.
	int32 statusCode  = 3;
	string reason     = 4;
	int32 pid         = 5;
	int32 tasks       = 6;
	int32 tasksLimit  = 7;
}

message WorkerActionMsg{
	bool success = 1;
	string message = 2;
	int32 tasks       = 3;
	int32 tasksLimit  = 4;
}
message TaskOutputMsg{
	string data  = 1;
}

message WorkerStatusResponseMsg{
	int32 tasks  = 1;
	int32 tasksLimit = 2;
	int32 cpuload = 3;
	int32 memused = 4;
	int32 memtotal = 5;
}
